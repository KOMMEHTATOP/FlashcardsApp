using FlashcardsApp.Api.Extensions;
using FlashcardsApp.Models.Constants;
using System.Text.Json.Serialization;

var builder = WebApplication.CreateBuilder(args);

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
builder.Logging.ClearProviders();
builder.Logging.AddConsole();

var logger = LoggerFactory.Create(config => { config.AddConsole(); })
    .CreateLogger("Startup");

// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã —Å JSON –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
builder.Services.AddControllers()
    .AddJsonOptions(options =>
    {
        options.JsonSerializerOptions.Converters.Add(new JsonStringEnumConverter());
        options.JsonSerializerOptions.PropertyNamingPolicy = null;
    });

// ===== –í–°–ï –ù–ê–°–¢–†–û–ô–ö–ò –ß–ï–†–ï–ó EXTENSION METHODS =====

// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–≤–Ω—É—Ç—Ä–∏: connectionString + DbContext)
builder.Services.AddDatabaseConfiguration(builder.Configuration, logger);

// –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è (–≤–Ω—É—Ç—Ä–∏: AddLocalization + RequestLocalizationOptions)
builder.Services.AddLocalizationConfiguration();

// Identity —Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π
builder.Services.AddIdentityConfiguration();

// JWT (–≤–Ω—É—Ç—Ä–∏: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞ + –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ authentication)
builder.Services.AddJwtAuthentication(builder.Configuration, logger);

// SignalR
builder.Services.AddSignalRConfiguration(builder.Environment);

// Swagger
builder.Services.AddSwaggerDocumentation();

// CORS (–≤–Ω—É—Ç—Ä–∏: —á—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ + allowedOrigins + –Ω–∞—Å—Ç—Ä–æ–π–∫–∞)
builder.Services.AddCorsConfiguration(builder.Configuration, builder.Environment, logger);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–≥—Ä–∞–¥
builder.Services.Configure<RewardSettings>(
    builder.Configuration.GetSection("RewardSettings"));

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –í–°–ï–• —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
builder.Services.AddApplicationServices();

// –ü–æ—Ä—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
if (builder.Environment.IsDevelopment() && !IsRunningInDocker())
{
    builder.WebHost.UseUrls("http://localhost:5000");
    logger.LogInformation("üîß Port fixed to 5000 for local development");
}

var app = builder.Build();

// ===== MIDDLEWARE PIPELINE + –ú–ò–ì–†–ê–¶–ò–ò + –ú–ê–ü–ü–ò–ù–ì =====
app.ConfigureMiddleware(builder.Configuration, logger, builder.Environment);

app.Run();

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
static bool IsRunningInDocker()
{
    return Environment.GetEnvironmentVariable("DOTNET_RUNNING_IN_CONTAINER") == "true";
}