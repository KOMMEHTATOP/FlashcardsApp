version: '3.8'

services:
  postgres:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  migrations:
    build:
      context: .
      dockerfile: FlashcardsApp/Dockerfile.migrations
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - ConnectionStrings__DefaultConnection=${DB_CONNECTION_STRING}
    restart: "no"
    networks:
      - app-network

  webapp:
    build:
      context: .
      dockerfile: FlashcardsApp/Dockerfile
    ports:
      - "5000:8080"
    depends_on:
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    environment:
      - ConnectionStrings__DefaultConnection=${DB_CONNECTION_STRING}
      - Jwt__Key=${JWT_KEY}
      - ASPNETCORE_URLS=http://+:8080
      - ASPNETCORE_ENVIRONMENT=Development
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
    networks:
      - app-network

  # React frontend - добавит фронтенд разработчик
  # frontend:
  #   build:
  #     context: ./FlashcardsReactUI
  #     dockerfile: Dockerfile
  #   ports:
  #     - "3000:3000"
  #   depends_on:
  #     - webapp
  #   environment:
  #     - REACT_APP_API_URL=http://localhost:5000
  #   networks:
  #     - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge