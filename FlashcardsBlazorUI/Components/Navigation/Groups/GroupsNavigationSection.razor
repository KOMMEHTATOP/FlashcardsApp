@namespace FlashcardsBlazorUI.Components.Navigation.Groups
@using FlashcardsBlazorUI.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject GroupStore GroupStore
@inject NavigationManager Navigation

<AuthorizeView>
    <Authorized>
        <div class="nav-item px-3">
            <div class="nav-link" @onclick="ToggleGroupsMenu" style="cursor:pointer;">
                <span class="bi bi-collection-fill"></span>
                Мои группы
                <span class="bi @(isGroupsMenuExpanded ? "bi-chevron-down" : "bi-chevron-right")"
                      style="float:right;"></span>
            </div>

            @if (isGroupsMenuExpanded)
            {
                <div id="nav-groups-container" class="groups-submenu" style="margin-left:20px;">
                    @foreach (var group in GroupStore.Groups.OrderBy(g => g.Order))
                    {
                        <GroupNavigationItem Group="group" 
                                           IsExpanded="IsGroupExpanded(group.Id)"
                                           OnToggleExpand="() => ToggleGroupExpansion(group.Id)" />
                    }
                </div>
                
                <GroupsDragDropManager ContainerSelector="#nav-groups-container" 
                                     ItemSelector=".nav-group-draggable"
                                     TrashSelector=".nav-trash-zone"
                                     IsActive="isGroupsMenuExpanded" />
            }
        </div>
    </Authorized>
</AuthorizeView>

@code {
    private bool isGroupsMenuExpanded;
    private readonly Dictionary<Guid, bool> expandedGroups = new();

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationStateTask != null)
        {
            var authState = await AuthenticationStateTask;
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                await GroupStore.RefreshAsync();
            }
        }
    }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    private async Task ToggleGroupsMenu()
    {
        isGroupsMenuExpanded = !isGroupsMenuExpanded;
        
        if (isGroupsMenuExpanded && !GroupStore.Groups.Any())
        {
            await GroupStore.RefreshAsync();
        }
        
        Navigation.NavigateTo("/groups");
    }

    private void ToggleGroupExpansion(Guid groupId)
    {
        SetGroupExpanded(groupId, !IsGroupExpanded(groupId));
    }

    private bool IsGroupExpanded(Guid id) =>
        expandedGroups.TryGetValue(id, out var v) && v;

    private void SetGroupExpanded(Guid id, bool v) => 
        expandedGroups[id] = v;
}