@namespace FlashcardsBlazorUI.Components.Navigation.Groups
@using FlashcardsBlazorUI.Interfaces
@using FlashcardsBlazorUI.Services
@inject IJSRuntime JSRuntime
@inject IAuthService AuthService
@inject GroupStore GroupStore
@implements IDisposable

@code {
    [Parameter] public string ContainerSelector { get; set; } = "#nav-groups-container";
    [Parameter] public string ItemSelector { get; set; } = ".nav-group-draggable";
    [Parameter] public string TrashSelector { get; set; } = ".nav-trash-zone";
    [Parameter] public string ApiEndpoint { get; set; } = "http://localhost:5153/api/group/reorder";
    [Parameter] public bool IsActive { get; set; } = true;

    private bool isInitialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            GroupStore.GroupsChanged += HandleGroupsChanged;
        }

        if (IsActive && !isInitialized)
        {
            await InitializeDragDrop();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (IsActive && isInitialized)
        {
            await ReinitializeDragDrop();
        }
    }

    private void HandleGroupsChanged()
    {
        InvokeAsync(async () =>
        {
            if (IsActive)
            {
                await Task.Delay(200);
                await ReinitializeDragDrop();
            }
        });
    }

    private async Task InitializeDragDrop()
    {
        try
        {
            var token = await AuthService.GetTokenAsync();
            
            if (!string.IsNullOrEmpty(token))
            {
                await JSRuntime.InvokeVoidAsync("dragDropInterop.initializeDragDrop",
                    token,
                    ContainerSelector,
                    ItemSelector,
                    ApiEndpoint,
                    TrashSelector);
                
                isInitialized = true;
            }
            else
            {
                Console.WriteLine("GroupsDragDropManager: Токен не получен, пропускаем инициализацию");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"GroupsDragDropManager: Ошибка инициализации drag&drop: {ex.Message}");
        }
    }

    private async Task ReinitializeDragDrop()
    {
        try
        {
            var token = await AuthService.GetTokenAsync();
            
            if (!string.IsNullOrEmpty(token))
            {
                await JSRuntime.InvokeVoidAsync("dragDropInterop.initializeDragDrop",
                    token,
                    ContainerSelector,
                    ItemSelector,
                    ApiEndpoint,
                    TrashSelector);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"GroupsDragDropManager: Ошибка реинициализации drag&drop: {ex.Message}");
        }
    }

    public void Dispose()
    {
        GroupStore.GroupsChanged -= HandleGroupsChanged;
    }
}