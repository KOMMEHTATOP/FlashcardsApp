@page "/groups/{groupId:guid}/cards"
@using FlashcardsAppContracts.DTOs.Requests
@using FlashcardsAppContracts.DTOs.Responses
@using FlashcardsBlazorUI.Models
@using FlashcardsBlazorUI.Services
@inject GroupService GroupService
@inject CardService CardService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>@(currentGroup?.GroupName ?? "Карточки группы")</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h3>
        @if (currentGroup != null)
        {
            @currentGroup.GroupName
        }
        else if (isLoadingGroup)
        {
            <span>Загружаю группу...</span>
        }
        else
        {
            <span>Группа не найдена</span>
        }
    </h3>
    <div>
        @if (!showCreateForm)
        {
            <button class="btn btn-success me-2" @onclick="CreateNewCard">
                <span class="bi bi-plus-circle"></span> Создать карточку
            </button>
        }
        <button class="btn btn-secondary" @onclick="GoBack">
            <span class="bi bi-arrow-left"></span> Назад к группам
        </button>
    </div>
</div>

@if (showCreateForm)
{
    <div class="card mb-4">
        <div class="card-header bg-primary text-white">
            <h5 class="mb-0">Создание новой карточки</h5>
        </div>
        <div class="card-body">
            <EditForm Model="newCard" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />
                
                <div class="mb-3">
                    <label for="question" class="form-label">Вопрос <span class="text-danger">*</span></label>
                    <InputTextArea id="question" class="form-control" @bind-Value="newCard.Question" 
                                   rows="3" placeholder="Введите вопрос для изучения..." />
                    <ValidationMessage For="() => newCard.Question" class="text-danger" />
                </div>
                
                <div class="mb-3">
                    <label for="answer" class="form-label">Ответ <span class="text-danger">*</span></label>
                    <InputTextArea id="answer" class="form-control" @bind-Value="newCard.Answer" 
                                   rows="4" placeholder="Введите правильный ответ..." />
                    <ValidationMessage For="() => newCard.Answer" class="text-danger" />
                </div>
                
                <div class="d-flex gap-2">
                    <button type="submit" class="btn btn-success" disabled="@isSubmitting">
                        @if (isSubmitting)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Создать карточку
                    </button>
                    <button type="button" class="btn btn-secondary" @onclick="CancelCreate">
                        Отмена
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
}

@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Загружаю карточки...</span>
        </div>
    </div>
}
else if (cards == null || !cards.Any())
{
    <div class="alert alert-info text-center">
        <h5>В этой группе пока нет карточек</h5>
        <p>Используйте кнопку "Создать карточку" выше для добавления первой карточки.</p>
    </div>
}
else
{
    <div class="row">
        @foreach (var card in cards)
        {
            <div class="col-md-6 mb-3">
                <div class="card h-100">
                    <div class="card-body">
                        <h6 class="card-subtitle mb-2 text-muted">Вопрос:</h6>
                        <h5 class="card-title">@card.Question</h5>
                        <h6 class="card-subtitle mb-2 text-muted">Ответ:</h6>
                        <p class="card-text">@card.Answer</p>
                        <small class="text-muted">Создана: @card.CreatedAt.ToString("dd.MM.yyyy")</small>
                    </div>
                    <div class="card-footer bg-light">
                        <button class="btn btn-outline-primary btn-sm me-2" 
                                @onclick="() => ViewCard(card.CardId)">
                            <span class="bi bi-eye"></span> Изучать
                        </button>
                        <button class="btn btn-outline-secondary btn-sm me-2"
                                @onclick="() => StartEditCard(card)">
                            <span class="bi bi-pencil"></span> Изменить
                        </button>
                        <button class="btn btn-outline-danger btn-sm"
                                @onclick="() => DeleteCard(card)">
                            <span class="bi bi-trash"></span> Удалить
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@if (showEditModal && cardToEdit != null)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Редактирование карточки</h5>
                    <button type="button" class="btn-close" @onclick="CancelEdit"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="editCard" OnValidSubmit="HandleEditSubmit">
                        <DataAnnotationsValidator />
                        
                        <div class="mb-3">
                            <label for="edit-question" class="form-label">Вопрос <span class="text-danger">*</span></label>
                            <InputTextArea id="edit-question" class="form-control" @bind-Value="editCard.Question" 
                                           rows="3" />
                            <ValidationMessage For="() => editCard.Question" class="text-danger" />
                        </div>
                        
                        <div class="mb-3">
                            <label for="edit-answer" class="form-label">Ответ <span class="text-danger">*</span></label>
                            <InputTextArea id="edit-answer" class="form-control" @bind-Value="editCard.Answer" 
                                           rows="4" />
                            <ValidationMessage For="() => editCard.Answer" class="text-danger" />
                        </div>
                        
                        <div class="d-flex gap-2">
                            <button type="submit" class="btn btn-primary" disabled="@isEditSubmitting">
                                @if (isEditSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                Сохранить изменения
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="CancelEdit">
                                Отмена
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<div class="mt-3">
    <small class="text-muted">ID группы: @GroupId</small>
</div>

@code {
    [Parameter] public Guid GroupId { get; set; } 
    private ResultGroupDto? currentGroup;
    private List<Card>? cards;
    private bool isLoading = true;
    private bool isLoadingGroup = true;
    private bool showCreateForm;
    private bool isSubmitting;
    private bool showEditModal;
    private bool isEditSubmitting;
    private Card? cardToEdit;
    private CreateCardDto newCard = new() { Answer = "", Question = "" };
    private CreateCardDto editCard = new() { Answer = "", Question = "" };
    
    protected override async Task OnInitializedAsync()
    {
        await LoadGroup();
        await LoadCards();
    }

    private async Task LoadGroup()
    {
        try
        {
            isLoadingGroup = true;
            currentGroup = await GroupService.GetGroupAsync(GroupId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка загрузки группы: {ex.Message}");
            currentGroup = null;
        }
        finally
        {
            isLoadingGroup = false;
        }
    }
    
    private async Task LoadCards()
    {
        try
        {
            isLoading = true;
            cards = await CardService.GetCardsAsync(GroupId);
            Console.WriteLine($"Загружено карточек: {cards?.Count ?? 0}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка загрузки карточек: {ex.Message}");
            cards = new List<Card>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void CreateNewCard()
    {
        newCard = new CreateCardDto() { Answer = "", Question = "" };
        showCreateForm = true;
    }

    private void CancelCreate()
    {
        showCreateForm = false;
        newCard = new CreateCardDto() { Answer = "", Question = "" };
    }

    private async Task HandleSubmit()
    {
        try
        {
            isSubmitting = true;
            
            var cardDto = new CreateCardDto
            {
                Question = newCard.Question.Trim(),
                Answer = newCard.Answer.Trim()
            };

            await CardService.CreateCardAsync(cardDto, GroupId);
            
            showCreateForm = false;
            newCard = new CreateCardDto() { Answer = "", Question = "" };
            await LoadCards();
            
            Console.WriteLine("Карточка успешно создана");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка создания карточки: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void ViewCard(Guid cardId)
    {
        Navigation.NavigateTo($"/cards/{cardId}");
    }

    private void StartEditCard(Card card)
    {
        cardToEdit = card;
        editCard = new CreateCardDto
        {
            Question = card.Question,
            Answer = card.Answer
        };
        showEditModal = true;
    }

    private void CancelEdit()
    {
        showEditModal = false;
        cardToEdit = null;
        editCard = new CreateCardDto() { Answer = "", Question = "" };
    }

    private async Task HandleEditSubmit()
    {
        if (cardToEdit == null) return;
        
        try
        {
            isEditSubmitting = true;
            
            var cardDto = new CreateCardDto
            {
                Question = editCard.Question.Trim(),
                Answer = editCard.Answer.Trim()
            };

            await CardService.UpdateCardAsync(cardToEdit.CardId, cardDto);
            
            showEditModal = false;
            cardToEdit = null;
            editCard = new CreateCardDto() { Answer = "", Question = "" };
            await LoadCards();
            
            Console.WriteLine("Карточка успешно обновлена");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка обновления карточки: {ex.Message}");
        }
        finally
        {
            isEditSubmitting = false;
        }
    }

    private async Task DeleteCard(Card card)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "Вы действительно хотите удалить эту карточку?"))
            return;

        try
        {
            await CardService.DeleteCardAsync(card.CardId);
            await LoadCards();
            Console.WriteLine("Карточка успешно удалена");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка удаления карточки: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Произошла ошибка при удалении карточки");
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/groups");
    }
}