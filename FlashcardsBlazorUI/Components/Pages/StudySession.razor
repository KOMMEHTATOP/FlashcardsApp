@page "/study/{GroupId:guid}"
@using FlashcardsAppContracts.DTOs.Responses
@using FlashcardsBlazorUI.Services
@inject StudySessionService StudySessionService
@inject CardService CardService
@inject NavigationManager Navigation
@inject GroupService GroupService
@rendermode InteractiveServer

<PageTitle>Изучение карточек</PageTitle>

<style>
    .flip-card {
        background-color: transparent;
        width: 100%;
        height: 400px;
        perspective: 1000px;
        cursor: pointer;
    }

    .flip-card-inner {
        position: relative;
        width: 100%;
        height: 100%;
        text-align: center;
        transition: transform 0.6s;
        transform-style: preserve-3d;
    }

    .flip-card.flipped .flip-card-inner {
        transform: rotateY(180deg);
    }

    .flip-card-front, .flip-card-back {
        position: absolute;
        width: 100%;
        height: 100%;
        -webkit-backface-visibility: hidden;
        backface-visibility: hidden;
        border-radius: 15px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 30px;
        box-sizing: border-box;
    }

    .flip-card-front {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

    .flip-card-back {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        color: white;
        transform: rotateY(180deg);
    }

    .card-content {
        text-align: center;
        width: 100%;
    }

    .card-hint {
        position: absolute;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
        font-size: 0.9em;
        opacity: 0.8;
    }

    .progress-container {
        margin-bottom: 30px;
    }

    .navigation-arrow {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        z-index: 100;
        background: rgba(255, 255, 255, 0.9);
        border: 2px solid #0d6efd;
        border-radius: 50%;
        width: 60px;
        height: 60px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        font-size: 24px;
        color: #0d6efd;
        transition: all 0.3s;
    }

    .navigation-arrow:hover:not(:disabled) {
        background: #0d6efd;
        color: white;
        transform: translateY(-50%) scale(1.1);
    }

    .navigation-arrow:disabled {
        opacity: 0.3;
        cursor: not-allowed;
    }

    .arrow-left {
        left: -80px;
    }

    .arrow-right {
        right: -80px;
    }

    .card-wrapper {
        position: relative;
    }
</style>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h3>Сессия изучения</h3>
    <div class="d-flex gap-2">
        <button class="btn btn-outline-secondary" @onclick="NavigateToSettings">
            <span class="bi bi-gear"></span> Настройки
        </button>
        <button class="btn btn-danger" @onclick="ExitSession">
            <span class="bi bi-x-circle"></span> Завершить
        </button>
    </div>
</div>

@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Загрузка...</span>
        </div>
    </div>
}
else if (sessionCompleted)
{
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card shadow-lg">
                <div class="card-body text-center p-5">
                    <h2 class="mb-4">
                        <span class="bi bi-check-circle text-success" style="font-size: 3rem;"></span>
                    </h2>
                    <h3 class="mb-3">Сессия завершена!</h3>
                    <p class="lead mb-4">Карточки по теме <strong>@groupName</strong> закончились.</p>

                    <div class="alert alert-info mb-4">
                        <h4 class="mb-3">Ваш результат:</h4>
                        <div class="row text-center">
                            <div class="col-md-6">
                                <div class="p-3">
                                    <h2 class="text-success mb-2">@learnedCardsCount</h2>
                                    <p class="text-muted mb-0">Выученных карточек<br/>(рейтинг 4-5 ⭐)</p>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="p-3">
                                    <h2 class="text-primary mb-2">@(cards?.Count ?? 0)</h2>
                                    <p class="text-muted mb-0">Всего изучено<br/>карточек</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="d-flex gap-3 justify-content-center flex-wrap">
                        <button class="btn btn-primary btn-lg" @onclick="RestartSession">
                            <span class="bi bi-arrow-clockwise"></span> Изучить заново
                        </button>
                        <button class="btn btn-success btn-lg" @onclick="GoToGroup">
                            <span class="bi bi-plus-circle"></span> Добавить карточки
                        </button>
                        <button class="btn btn-outline-secondary btn-lg" @onclick="GoToGroups">
                            <span class="bi bi-list"></span> К списку групп
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else if (cards == null || cards.Count == 0)
{
    <div class="alert alert-info">
        <h5>Нет карточек для изучения</h5>
        <p>В этой группе нет карточек, соответствующих вашим настройкам фильтрации.</p>
        <button class="btn btn-primary" @onclick='() => Navigation.NavigateTo("/groups")'>
            Вернуться к группам
        </button>
    </div>
}
else
{
    <div class="progress-container">
        <div class="d-flex justify-content-between mb-2">
            <span class="text-muted">Прогресс изучения</span>
            <span class="fw-bold">@(currentIndex + 1) из @cards.Count</span>
        </div>
        <div class="progress" style="height: 25px;">
            <div class="progress-bar bg-success"
                 role="progressbar"
                 style="width: @progressPercentage%"
                 aria-valuenow="@(currentIndex + 1)"
                 aria-valuemin="0"
                 aria-valuemax="@cards.Count">
                @progressPercentage%
            </div>
        </div>
    </div>

    <div class="row justify-content-center">
        <div class="col-lg-8 card-wrapper">
            <button class="navigation-arrow arrow-left"
                    @onclick="PreviousCard"
                    disabled="@(currentIndex == 0)">
                <span class="bi bi-chevron-left"></span>
            </button>

            <div class="flip-card @(isFlipped ? "flipped" : "")" @onclick="FlipCard">
                <div class="flip-card-inner">
                    <div class="flip-card-front">
                        <div class="card-content">
                            <h2 class="mb-3">
                                <span class="bi bi-question-circle"></span>
                            </h2>
                            <h3>@currentCard.Question</h3>
                            <div class="card-hint">
                                <span class="bi bi-hand-index"></span> Нажмите для ответа
                            </div>
                        </div>
                    </div>

                    <div class="flip-card-back">
                        <div class="card-content">
                            <h2 class="mb-3">
                                <span class="bi bi-lightbulb"></span>
                            </h2>
                            <h3>@currentCard.Answer</h3>
                            <div class="card-hint">
                                <span class="bi bi-hand-index"></span> Нажмите чтобы вернуться
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <button class="navigation-arrow arrow-right"
                    @onclick="NextCard"
                    disabled="@(currentIndex == cards.Count - 1)">
                <span class="bi bi-chevron-right"></span>
            </button>

            @if (isFlipped)
            {
                <div class="mt-4">
                    <h5 class="text-center mb-3">Как хорошо вы знали ответ?</h5>
                    <div class="d-flex justify-content-center gap-1"
                         @onmouseleave="() => hoveredRating = 0">
                        @for (int i = 1; i <= 5; i++)
                        {
                            var rating = i;
                            var isFilled = (hoveredRating > 0 ? hoveredRating >= rating : selectedRating >= rating);
                            <button class="btn star-btn"
                                    @onclick="() => RateCard(rating)"
                                    @onmouseenter="() => hoveredRating = rating"
                                    style="border: none; background: none; font-size: 2.5rem; padding: 5px; color: @(isFilled ? "#ffc107" : "#e0e0e0");">
                                <span>@(isFilled ? "★" : "☆")</span>
                            </button>
                        }
                    </div>
                    <div class="text-center mt-2">
                        <small class="text-muted">
                            @if (hoveredRating > 0)
                            {
                                <span>@GetRatingText(hoveredRating)</span>
                            }
                            else
                            {
                                <span>Наведите на звездочки для оценки</span>
                            }
                        </small>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter] public Guid GroupId { get; set; }

    private List<StudyCardDto>? cards;
    private StudyCardDto? currentCard => cards?[currentIndex];
    private int currentIndex = 0;
    private bool isLoading = true;
    private bool isFlipped;
    private int hoveredRating;
    private int selectedRating;
    private bool sessionCompleted;
    private int learnedCardsCount;
    private string? groupName;

    private int progressPercentage => cards != null && cards.Count > 0
        ? (int)((currentIndex + 1) * 100.0 / cards.Count)
        : 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadSession();
    }

    private async Task LoadSession()
    {
        try
        {
            isLoading = true;

            var group = await GroupService.GetGroupAsync(GroupId);
            groupName = group?.GroupName ?? "Неизвестная группа";

            var session = await StudySessionService.StartSessionAsync(GroupId, useDefaultSettings: false);

            if (session?.Cards != null)
            {
                cards = session.Cards.ToList();
                Console.WriteLine($"Загружено {cards.Count} карточек для изучения");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка загрузки сессии: {ex.Message}");
            cards = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void FlipCard()
    {
        isFlipped = !isFlipped;
    }

    private void NextCard()
    {
        if (currentIndex < cards!.Count - 1)
        {
            currentIndex++;
            ResetCardState();
        }
    }

    private void PreviousCard()
    {
        if (currentIndex > 0)
        {
            currentIndex--;
            ResetCardState();
        }
    }

    private void ResetCardState()
    {
        isFlipped = false;
        hoveredRating = 0;
        selectedRating = 0;
    }

    private async Task RateCard(int rating)
    {
        try
        {
            selectedRating = rating;
            await CardService.RateCardAsync(currentCard!.CardId, rating);
            Console.WriteLine($"Карточка {currentCard.CardId} оценена: {rating} звезд");

            if (rating >= 4)
            {
                learnedCardsCount++;
            }

            StateHasChanged();

            if (currentIndex == cards!.Count - 1)
            {
                await Task.Delay(1000);
                sessionCompleted = true;
            }
            else
            {
                await Task.Delay(1000);
                NextCard();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка оценки карточки: {ex.Message}");
        }
    }

    private string GetRatingText(int rating)
    {
        return rating switch
        {
            1 => "⭐ Совсем не знал",
            2 => "⭐⭐ Плохо знал",
            3 => "⭐⭐⭐ Нормально",
            4 => "⭐⭐⭐⭐ Хорошо знал",
            5 => "⭐⭐⭐⭐⭐ Отлично знал",
            _ => ""
        };
    }

    private async Task RestartSession()
    {
        sessionCompleted = false;
        currentIndex = 0;
        learnedCardsCount = 0;
        ResetCardState();

        try
        {
            isLoading = true;
            var session = await StudySessionService.StartSessionAsync(GroupId, useDefaultSettings: true);

            if (session?.Cards != null)
            {
                cards = session.Cards.ToList();
            }
        }
        finally
        {
            isLoading = false;
        }
    }

    private void GoToGroup()
    {
        Navigation.NavigateTo($"/groups/{GroupId}/cards");
    }

    private void GoToGroups()
    {
        Navigation.NavigateTo("/groups");
    }

    private void NavigateToSettings()
    {
        Navigation.NavigateTo("/study-settings");
    }

    private void ExitSession()
    {
        Navigation.NavigateTo("/groups");
    }
}