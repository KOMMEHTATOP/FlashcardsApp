@page "/register"
@using FlashcardsAppContracts.DTOs.Requests
@using FlashcardsBlazorUI.Interfaces
@inject IAuthService AuthService
@rendermode InteractiveServer

<PageTitle>Регистрация</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-header bg-light">
                    <h4>Регистрация в FlashCards</h4>
                </div>
                <div class="card-body">

                    @if (isRegistering)
                    {
                        <div class="alert alert-info d-flex align-items-center">
                            <div class="spinner-border spinner-border-sm me-2"></div>
                            Выполняется регистрация...
                        </div>
                    }
                    else if (isRegistered && !string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success">
                            @successMessage
                            <div class="mt-3">
                                <a href="/login" class="btn btn-sm btn-primary">Перейти ко входу</a>
                            </div>
                        </div>
                    }
                    else
                    {
                        <EditForm Model="registerModel" OnValidSubmit="HandleRegister" FormName="RegisterForm">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="alert alert-danger">
                                    @errorMessage
                                    @if (errors != null && errors.Any())
                                    {
                                        <ul class="mb-0 mt-2">
                                            @foreach (var error in errors)
                                            {
                                                <li>@error</li>
                                            }
                                        </ul>
                                    }
                                </div>
                            }

                            <div class="mb-3">
                                <label class="form-label">Email:</label>
                                <InputText @bind-Value="registerModel.Email"
                                           class="form-control"
                                           placeholder="Введите email" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Пароль:</label>
                                <InputText @bind-Value="registerModel.Password"
                                           type="password"
                                           class="form-control"
                                           placeholder="Введите пароль" />
                            </div>

                            <button type="submit" class="btn btn-success w-100" disabled="@isRegistering">
                                @if (isRegistering)
                                {
                                    <span>Регистрация...</span>
                                }
                                else
                                {
                                    <span>Зарегистрироваться</span>
                                }
                            </button>

                            <div class="mt-3 text-center">
                                <small>Уже есть аккаунт? <a href="/login">Войти</a></small>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    public RegisterModel registerModel { get; set; } = new() { Email = "", Password = "" };

    private bool isRegistering;
    private bool isRegistered;
    private string? successMessage;
    private string? errorMessage;
    private List<string>? errors;

    private async Task HandleRegister()
    {
        try
        {
            isRegistering = true;
            errorMessage = null;
            successMessage = null;
            errors = null;
            StateHasChanged();

            var result = await AuthService.RegisterUserAsync(registerModel);

            if (result.IsSuccess)
            {
                successMessage = result.Message;
                isRegistered = true;
                registerModel = new() { Email = "", Password = "" };
            }
            else
            {
                errorMessage = result.Message;
                errors = result.Errors;
            }
        }
        catch
        {
            errorMessage = "Произошла ошибка при регистрации";
        }
        finally
        {
            isRegistering = false;
            StateHasChanged();
        }
    }
}
