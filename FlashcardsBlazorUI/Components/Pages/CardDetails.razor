@page "/cards/{CardId:guid}"
@using FlashcardsBlazorUI.Models
@using FlashcardsBlazorUI.Services
@inject CardService CardService
@inject NavigationManager Navigation
@rendermode InteractiveServer


<PageTitle>–ö–∞—Ä—Ç–æ—á–∫–∞</PageTitle>

<style>
    .flip-card {
        background-color: transparent;
        width: 100%;
        height: 400px;
        perspective: 1000px;
        cursor: pointer;
    }

    .flip-card-inner {
        position: relative;
        width: 100%;
        height: 100%;
        text-align: center;
        transition: transform 0.6s;
        transform-style: preserve-3d;
    }

    .flip-card.flipped .flip-card-inner {
        transform: rotateY(180deg);
    }

    .flip-card-front, .flip-card-back {
        position: absolute;
        width: 100%;
        height: 100%;
        -webkit-backface-visibility: hidden;
        backface-visibility: hidden;
        border-radius: 15px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 30px;
        box-sizing: border-box;
    }

    .flip-card-front {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

    .flip-card-back {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        color: white;
        transform: rotateY(180deg);
    }

    .card-content {
        text-align: center;
        width: 100%;
    }

    .card-hint {
        position: absolute;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
        font-size: 0.9em;
        opacity: 0.8;
    }

    .flip-instruction {
        margin-top: 20px;
        color: #6c757d;
        font-style: italic;
    }
</style>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h3>–ò–∑—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏</h3>
    <button class="btn btn-secondary" @onclick="GoBack">
        <span class="bi bi-arrow-left"></span> –ù–∞–∑–∞–¥
    </button>
</div>

@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
        </div>
    </div>
}
else if (card == null)
{
    <div class="alert alert-warning">
        <h5>–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h5>
        <p>–í–æ–∑–º–æ–∂–Ω–æ, –∫–∞—Ä—Ç–æ—á–∫–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–π.</p>
        <button class="btn btn-primary" @onclick="GoBack">–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥</button>
    </div>
}
else
{
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="flip-card @(isFlipped ? "flipped" : "")" @onclick="FlipCard">
                <div class="flip-card-inner">
                    <!-- –õ–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ - –í–æ–ø—Ä–æ—Å -->
                    <div class="flip-card-front">
                        <div class="card-content">
                            <h2 class="mb-3">
                                <span class="bi bi-question-circle"></span>
                            </h2>
                            <h3>@card.Question</h3>
                            <div class="card-hint">
                                <span class="bi bi-hand-index"></span> –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
                            </div>
                        </div>
                    </div>

                    <!-- –û–±—Ä–∞—Ç–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ - –û—Ç–≤–µ—Ç -->
                    <div class="flip-card-back">
                        <div class="card-content">
                            <h2 class="mb-3">
                                <span class="bi bi-lightbulb"></span>
                            </h2>
                            <h3>@card.Answer</h3>
                            <div class="card-hint">
                                <span class="bi bi-hand-index"></span> –ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            @if (!isFlipped)
            {
                <p class="flip-instruction text-center">
                    üí° –ü–æ–¥—É–º–∞–π—Ç–µ –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É
                </p>
            }
            else
            {
                <div class="mt-4">
                    <h5 class="text-center mb-3">–ö–∞–∫ —Ö–æ—Ä–æ—à–æ –≤—ã –∑–Ω–∞–ª–∏ –æ—Ç–≤–µ—Ç?</h5>
                    <div class="d-flex justify-content-center gap-1" 
                         @onmouseleave="() => hoveredRating = 0">
                        @for (int i = 1; i <= 5; i++)
                        {
                            var rating = i;
                            var isFilled = (hoveredRating > 0 ? hoveredRating >= rating : selectedRating >= rating);
                            <button class="btn star-btn" 
                                    @onclick="() => RateCard(rating)"
                                    @onmouseenter="() => hoveredRating = rating"
                                    style="border: none; background: none; font-size: 2.5rem; padding: 5px; color: @(isFilled ? "#ffc107" : "#e0e0e0");">
                                <span>@(isFilled ? "‚òÖ" : "‚òÜ")</span>
                            </button>
                        }
                    </div>
                    <div class="text-center mt-2">
                        <small class="text-muted">
                            @if (hoveredRating > 0)
                            {
                                <span>@GetRatingText(hoveredRating)</span>
                            }
                            else
                            {
                                <span>–ù–∞–≤–µ–¥–∏—Ç–µ –Ω–∞ –∑–≤–µ–∑–¥–æ—á–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏</span>
                            }
                        </small>
                    </div>
                </div>
            }

            <div class="mt-4 text-center">
                <button class="btn btn-outline-primary me-2" @onclick="ResetCard">
                    <span class="bi bi-arrow-clockwise"></span> –°–±—Ä–æ—Å–∏—Ç—å
                </button>
                <button class="btn btn-outline-secondary">
                    <span class="bi bi-pencil"></span> –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                </button>
            </div>
        </div>
    </div>
}

<div class="mt-3 text-center">
    <small class="text-muted">
        –°–æ–∑–¥–∞–Ω–∞: @card?.CreatedAt.ToString("dd.MM.yyyy") | ID: @CardId
    </small>
</div>

@code {
    [Parameter] public Guid CardId { get; set; }

    private Card? card;
    private bool isLoading = true;
    private bool isFlipped;
    private int hoveredRating;
    private int selectedRating;

    protected override async Task OnInitializedAsync()
    {
        await LoadCard();
    }

    protected override async Task OnParametersSetAsync()
    {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ
        isFlipped = false;
        await LoadCard();
    }

    private async Task LoadCard()
    {
        try
        {
            isLoading = true;
            card = await CardService.GetCardAsync(CardId);
            Console.WriteLine($"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞: {card?.Question ?? "null"}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏: {ex.Message}");
            card = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void FlipCard()
    {
        isFlipped = !isFlipped;
    }

    private void ResetCard()
    {
        isFlipped = false;
        hoveredRating = 0;
        selectedRating = 0;
    }

    private async Task RateCard(int rating)
    {
        try
        {
            selectedRating = rating;
            await CardService.RateCardAsync(CardId, rating);
            Console.WriteLine($"–ö–∞—Ä—Ç–æ—á–∫–∞ –æ—Ü–µ–Ω–µ–Ω–∞: {rating} –∑–≤–µ–∑–¥");

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ü–µ–Ω–∫–µ
            StateHasChanged();

            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏: {ex.Message}");
        }
    }

    private string GetRatingText(int rating)
    {
        return rating switch
        {
            1 => "‚≠ê –°–æ–≤—Å–µ–º –Ω–µ –∑–Ω–∞–ª",
            2 => "‚≠ê‚≠ê –ü–ª–æ—Ö–æ –∑–Ω–∞–ª",
            3 => "‚≠ê‚≠ê‚≠ê –ù–æ—Ä–º–∞–ª—å–Ω–æ",
            4 => "‚≠ê‚≠ê‚≠ê‚≠ê –•–æ—Ä–æ—à–æ –∑–Ω–∞–ª",
            5 => "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê –û—Ç–ª–∏—á–Ω–æ –∑–Ω–∞–ª",
            _ => ""
        };
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/groups");
    }
}