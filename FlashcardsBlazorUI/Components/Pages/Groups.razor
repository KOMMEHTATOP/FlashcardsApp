@page "/groups"
@using FlashcardsBlazorUI.Models
@using FlashcardsBlazorUI.Services
@inject ApiService ApiService
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Группы карточек</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h3>Мои группы карточек</h3>
    <button class="btn btn-success" @onclick="CreateNewGroup">
        <span class="bi bi-plus-circle"></span> Создать группу
    </button>
</div>

@if (isLoading)
{
    <p><em>Загружаю группы...</em></p>
}
else if (groups == null || !groups.Any())
{
    <div class="alert alert-info text-center">
        <h5>У вас пока нет групп карточек</h5>
        <p>Создайте первую группу для изучения карточек</p>
    </div>
}
else
{
    <div class="row">
        @foreach (var group in groups)
        {
            <div class="col-md-4 mb-3">
                <div class="card group-card" data-group-id="@group.Id" style="cursor: move;">
                    <div class="card-body">
                        <h5 class="card-title">@group.GroupName</h5>
                        <p class="card-text">
                            <small class="text-muted">Создана: @group.CreatedAt.ToString("dd.MM.yyyy")</small>
                        </p>
                        <span class="badge" style="background-color: @GetColorCode(group.GroupColor)">@group.GroupColor</span>
                        <br /><br />
                        <button class="btn btn-primary btn-sm" @onclick="() => ViewCards(group.Id)">
                            Открыть карточки
                        </button>
                    </div>
                </div>
            </div>
        }

    </div>
}

@if (showCreateForm)
{
    <FlashcardsBlazorUI.Components.Forms.CreateGroupForm 
        OnCancel="() => showCreateForm = false"
        OnGroupCreated="OnGroupCreated" />
}

<!-- Фиксированная корзина в правом нижнем углу -->
<div class="position-fixed trash-zone" style="bottom: 30px; right: 30px; z-index: 1000; width: 120px; height: 120px;">
    <div class="card h-100 border-danger text-center" style="border-width: 3px; border-style: dashed; background-color: rgba(255,255,255,0.95);">
        <div class="card-body d-flex flex-column align-items-center justify-content-center text-danger">
            <i class="bi bi-trash" style="font-size: 32px; margin-bottom: 5px;"></i>
            <small>Удалить</small>
        </div>
    </div>
</div>

@code {
    private List<Group>? groups;
    private bool isLoading = true;
    private bool showCreateForm = false;

    protected override async Task OnInitializedAsync()
    {
        await ApiService.InitializeAsync();
        await LoadGroups();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Убираем вызов JavaScript отсюда - он будет автоматический
    }

    private async Task InitializeDragDrop()
    {
        try
        {
            await Task.Delay(100);
            await JSRuntime.InvokeVoidAsync("dragDropInterop.initializeDragDrop");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка инициализации drag & drop: {ex.Message}");
        }
    }

    [JSInvokable("DeleteGroup")]
    public async Task DeleteGroupFromJS(string groupIdString)
    {
        if (Guid.TryParse(groupIdString, out var groupId))
        {
            var confirm = await JSRuntime.InvokeAsync<bool>("confirm", 
                "Вы уверены, что хотите удалить эту группу? Все карточки в группе также будут удалены.");
            
            if (confirm)
            {
                var success = await ApiService.DeleteGroupAsync(groupId);
                if (success)
                {
                    await LoadGroups();
                    StateHasChanged();
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Ошибка при удалении группы");
                }
            }
        }
    }

    private async Task LoadGroups()
    {
        try
        {
            isLoading = true;
            groups = await ApiService.GetGroupsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка загрузки групп: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void CreateNewGroup()
    {
        showCreateForm = true;
    }

    private async Task OnGroupCreated()
    {
        showCreateForm = false;
        await LoadGroups();
        Navigation.NavigateTo("/groups", forceLoad: true);
    }

    private void ViewCards(Guid groupId)
    {
        Navigation.NavigateTo($"/groups/{groupId}/cards");
    }
    
    private string GetColorCode(string colorName)
    {
        return colorName.ToLower() switch
        {
            "red" => "#dc3545",
            "green" => "#28a745", 
            "yellow" => "#ffc107",
            "orange" => "#fd7e14",
            "purple" => "#6f42c1",
            "pink" => "#e83e8c",
            "black" => "#343a40",
            _ => "#6c757d"
        };
    }    
}


<script>
console.log("=== Drag & drop с правильным DTO ===");

(function() {
    let draggedElement = null;

    function setupDragDrop() {
        if (window.dragDropInitialized) return;
        
        const cards = document.querySelectorAll('.group-card');
        if (cards.length === 0) {
            setTimeout(setupDragDrop, 300);
            return;
        }
        
        window.dragDropInitialized = true;
        console.log("Настройка карточек:", cards.length);
        
        cards.forEach(function(card) {
            card.draggable = true;
            card.style.cursor = 'grab';
            
            card.addEventListener('dragstart', function(e) {
                draggedElement = this;
                e.dataTransfer.setData('text/plain', this.dataset.groupId);
                this.style.opacity = '0.5';
            });
            
            card.addEventListener('dragend', function(e) {
                this.style.opacity = '1';
                draggedElement = null;
            });
            
            card.addEventListener('dragover', function(e) {
                e.preventDefault();
                if (draggedElement && draggedElement !== this) {
                    this.style.border = '2px solid blue';
                }
            });
            
            card.addEventListener('dragleave', function(e) {
                this.style.border = '';
            });
            
            card.addEventListener('drop', function(e) {
                e.preventDefault();
                this.style.border = '';
                
                if (draggedElement && draggedElement !== this) {
                    const draggedId = draggedElement.dataset.groupId;
                    const targetId = this.dataset.groupId;
                    
                    console.log('Меняем порядок:', draggedId, 'перед', targetId);
                    
                    // Собираем все группы в новом порядке
                    const allCards = document.querySelectorAll('.group-card');
                    const reorderData = [];
                    let order = 1;
                    
                    allCards.forEach(function(card) {
                        const id = card.dataset.groupId;
                        if (id === targetId) {
                            // Вставляем перетаскиваемую группу перед целевой
                            reorderData.push({
                                Id: draggedId,        // Используем Id вместо GroupId
                                Order: order++        // Используем Order вместо NewOrder
                            });
                        }
                        if (id !== draggedId) {
                            reorderData.push({
                                Id: id,               // Используем Id вместо GroupId  
                                Order: order++        // Используем Order вместо NewOrder
                            });
                        }
                    });
                    
                    console.log('Отправляем данные:', reorderData);
                    
                    // Отправляем на сервер
                    fetch('http://localhost:5153/api/group/reorder', {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': 'Bearer ' + localStorage.getItem('authToken')
                        },
                        body: JSON.stringify(reorderData)
                    })
                    .then(function(response) {
                        console.log('Ответ сервера:', response.status);
                        if (response.ok) {
                            location.reload();
                        } else {
                            alert('Ошибка изменения порядка');
                        }
                    })
                    .catch(function(error) {
                        console.error('Ошибка запроса:', error);
                        alert('Ошибка изменения порядка');
                    });
                }
            });
        });
        
        // Корзина остается без изменений
        const trashZone = document.querySelector('.trash-zone');
        if (trashZone) {
            trashZone.addEventListener('dragover', function(e) {
                e.preventDefault();
                this.style.backgroundColor = '#f8d7da';
            });
            
            trashZone.addEventListener('dragleave', function(e) {
                this.style.backgroundColor = '';
            });
            
            trashZone.addEventListener('drop', function(e) {
                e.preventDefault();
                this.style.backgroundColor = '';
                const groupId = e.dataTransfer.getData('text/plain');
                
                if (confirm('Удалить группу?')) {
                    fetch('http://localhost:5153/api/group/' + groupId, {
                        method: 'DELETE',
                        headers: {
                            'Authorization': 'Bearer ' + localStorage.getItem('authToken')
                        }
                    }).then(function(response) {
                        if (response.ok) location.reload();
                    });
                }
            });
        }
    }

    setupDragDrop();
})();
</script>