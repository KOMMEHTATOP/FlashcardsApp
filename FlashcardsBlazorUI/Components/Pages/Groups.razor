@page "/groups"
@using FlashcardsBlazorUI.Models
@using FlashcardsBlazorUI.Services
@inject ApiService ApiService
@rendermode InteractiveServer
@inject NavigationManager Navigation


<PageTitle>Группы карточек</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h3>Мои группы карточек</h3>
    <button class="btn btn-success" @onclick="CreateNewGroup">
        <span class="bi bi-plus-circle"></span> Создать группу
    </button>
</div>

@if (isLoading)
{
    <p><em>Загружаю группы...</em></p>
}
else if (groups == null || !groups.Any())
{
    <div class="alert alert-info text-center">
        <h5>У вас пока нет групп карточек</h5>
        <p>Создайте первую группу для изучения карточек</p>
    </div>
}
else
{
    <div class="row">
        @foreach (var group in groups)
        {
            <div class="col-md-4 mb-3">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">@group.GroupName</h5>
                        <p class="card-text">
                            <small class="text-muted">Создана: @group.CreatedAt.ToString("dd.MM.yyyy")</small>
                        </p>
                        <span class="badge" style="background-color: @GetColorCode(group.GroupColor)">@group.GroupColor</span>
                        <br /><br />
                        <button class="btn btn-primary btn-sm" @onclick="() => ViewCards(group.Id)">
                            Открыть карточки
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@if (showCreateForm)
{
    <FlashcardsBlazorUI.Components.Forms.CreateGroupForm 
        OnCancel="() => showCreateForm = false"
        OnGroupCreated="OnGroupCreated" />
}

@code {
    private List<Group>? groups;
    private bool isLoading = true;
    private bool showCreateForm = false;

    protected override async Task OnInitializedAsync()
    {
        await ApiService.InitializeAsync();
        await LoadGroups();
    }

    private async Task LoadGroups()
    {
        try
        {
            isLoading = true;
            groups = await ApiService.GetGroupsAsync();
        }
        catch (Exception ex)
        {
            // Здесь можно добавить обработку ошибок
            Console.WriteLine($"Ошибка загрузки групп: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void CreateNewGroup()
    {
        showCreateForm = true;
    }

    private async Task OnGroupCreated()
    {
        showCreateForm = false;
        await LoadGroups();
        Navigation.NavigateTo("/groups", forceLoad: true);
    }

    private void ViewCards(Guid groupId)
    {
        Navigation.NavigateTo($"/groups/{groupId}/cards");
    }
    
    private string GetColorCode(string colorName)
    {
        return colorName.ToLower() switch
        {
            "red" => "#dc3545",
            "green" => "#28a745", 
            "yellow" => "#ffc107",
            "orange" => "#fd7e14",
            "purple" => "#6f42c1",
            "pink" => "#e83e8c",
            "black" => "#343a40",
            _ => "#6c757d"
        };
    }    

}