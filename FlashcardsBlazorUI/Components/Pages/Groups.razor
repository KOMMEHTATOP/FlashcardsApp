@page "/groups"
@using FlashcardsAppContracts.Constants
@using FlashcardsBlazorUI.Interfaces
@using FlashcardsBlazorUI.Services
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject GroupStore GroupStore     
@inject IConfiguration Configuration
@implements IDisposable
@rendermode InteractiveServer

<PageTitle>Группы карточек</PageTitle>

<style>
    body, .blazor-server-app {
        background: linear-gradient(135deg, #95a5a6 0%, #7f8c8d 50%, #6c7b7d 100%);
        min-height: 100vh;
    }
    
    .page-content {
        background: transparent;
    }
</style>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h3>Мои группы карточек</h3>
    <button class="btn btn-success" @onclick="CreateNewGroup">
        <span class="bi bi-plus-circle"></span> Создать группу
    </button>
</div>

@if (isLoading)
{
    <p><em>Загружаю группы...</em></p>
}
else if (!GroupStore.Groups.Any())
{
    <div class="alert alert-info text-center">
        <h5>У вас пока нет групп карточек</h5>
        <p>Создайте первую группу для изучения карточек</p>
    </div>
}
else
{
    <div id="groups-container" class="row">
        @foreach (var group in GroupStore.Groups.OrderBy(g => g.Order))
        {
            <div class="col-md-4 mb-3" @key="@($"{group.Id}-{group.Order}")">
                <div class="card group-card" data-group-id="@group.Id" 
                     style="cursor: move; background: @GetGradientStyle(group.GroupColor); color: @GetTextColor(group.GroupColor);">
                    <div class="card-body">
                        <h5 class="card-title">@group.GroupName</h5>
                        <p class="card-text">
                            <small style="color: @GetTextColor(group.GroupColor); opacity: 0.8;">Создана: @group.CreatedAt.ToString("dd.MM.yyyy")</small>
                        </p>
                        <button class="btn btn-success btn-sm mt-2" 
                                @onclick='() => Navigation.NavigateTo($"/study/{group.Id}")'
                                @onclick:stopPropagation="true">
                            <span class="bi bi-play-circle"></span> Изучать
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@if (showCreateForm)
{
    <FlashcardsBlazorUI.Components.Forms.CreateGroupForm
        OnCancel="() => showCreateForm = false"
        OnGroupCreated="OnGroupCreated" />
}

<div class="position-fixed trash-zone" style="bottom:30px; right:30px; z-index:1000; width:120px; height:120px;">
    <div class="card h-100 border-danger text-center" style="border-width:3px; border-style:dashed; background-color:rgba(255,255,255,0.95);">
        <div class="card-body d-flex flex-column align-items-center justify-content-center text-danger">
            <i class="bi bi-trash" style="font-size:32px; margin-bottom:5px;"></i>
            <small>Удалить</small>
        </div>
    </div>
</div>

@code {
    private bool isLoading = true;
    private bool showCreateForm;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            GroupStore.GroupsChanged += HandleGroupsChanged;
            await GroupStore.RefreshAsync();
            isLoading = false;
        }
        catch (UnauthorizedAccessException)
        {
            Navigation.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Groups.razor: Ошибка инициализации: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(100);
            await InitializeDragDrop();
        }
    }

    private void HandleGroupsChanged()
    {
        InvokeAsync(async () =>
        {
            StateHasChanged();
        
            await Task.Delay(200);
            await InitializeDragDrop();
        });
    }
    
    private async Task InitializeDragDrop()
    {
        try
        {
            // Проверяем доступность JavaScript interop
            await JSRuntime.InvokeVoidAsync("eval", "null");
    
            var token = await AuthService.GetTokenAsync();
            if (!string.IsNullOrEmpty(token))
            {
                var backendUrl = Configuration["BackendUrl"] ?? "http://localhost:5153";
            
                await JSRuntime.InvokeVoidAsync("dragDropInterop.initializeDragDrop",
                    token,
                    "#groups-container",
                    ".group-card",
                    $"{backendUrl}/api/group/reorder",
                    ".trash-zone");
            }
        }
        catch (InvalidOperationException)
        {
            // JavaScript interop недоступен (prerendering), игнорируем
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Groups.razor: Ошибка инициализации drag&drop: {ex.Message}");
        }
    }
    
    private void CreateNewGroup() => showCreateForm = true;

    private async Task OnGroupCreated()
    {
        showCreateForm = false;
        await GroupStore.RefreshAsync();
        Navigation.NavigateTo("/groups");
    }

    private void ViewCards(Guid groupId) =>
        Navigation.NavigateTo($"/groups/{groupId}/cards");

    private string GetGradientStyle(GroupColor color) => color switch
    {
        GroupColor.Red => "linear-gradient(135deg, #dc3545 0%, #c82333 100%)",
        GroupColor.Green => "linear-gradient(135deg, #28a745 0%, #20c997 100%)",
        GroupColor.Yellow => "linear-gradient(135deg, #ffc107 0%, #ffed4e 100%)",
        GroupColor.Orange => "linear-gradient(135deg, #fd7e14 0%, #ff9500 100%)",
        GroupColor.Purple => "linear-gradient(135deg, #6f42c1 0%, #8e44ad 100%)",
        GroupColor.Pink => "linear-gradient(135deg, #e83e8c 0%, #f06292 100%)",
        GroupColor.Black => "linear-gradient(135deg, #343a40 0%, #495057 100%)",
        _ => "linear-gradient(135deg, #6c757d 0%, #868e96 100%)"
    };

    private string GetTextColor(GroupColor color) => color switch
    {
        GroupColor.Yellow => "#000000",
        GroupColor.Orange => "#000000",
        GroupColor.Pink => "#000000",
        _ => "#ffffff"
    };

    public void Dispose()
    {
        GroupStore.GroupsChanged -= HandleGroupsChanged;
    }
}