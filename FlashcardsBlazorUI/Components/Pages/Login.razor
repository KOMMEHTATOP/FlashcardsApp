@page "/"
@page "/login"
@using FlashcardsAppContracts.DTOs.Requests
@using FlashcardsBlazorUI.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@inject IAuthService AuthService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Вход в систему</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h4>Вход в FlashCards</h4>
                </div>
                <div class="card-body">

                    @if (isLogging)
                    {
                        <div class="alert alert-info">
                            <div class="spinner-border spinner-border-sm me-2"></div>
                            Выполняется вход...
                        </div>
                    }
                    else if (shouldRedirect)
                    {
                        <div class="alert alert-success">
                            <div class="spinner-border spinner-border-sm me-2"></div>
                            Перенаправление...
                        </div>
                    }
                    else
                    {
                        <EditForm Model="loginRequest" OnValidSubmit="HandleLogin" FormName="LoginForm">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="alert alert-danger">@errorMessage</div>
                            }

                            <div class="mb-3">
                                <label class="form-label">Email:</label>
                                <InputText @bind-Value="loginRequest.Email"
                                           class="form-control"
                                           placeholder="Введите email" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Пароль:</label>
                                <InputText @bind-Value="loginRequest.Password"
                                           type="password"
                                           class="form-control"
                                           placeholder="Введите пароль" />
                            </div>

                            <button type="submit" class="btn btn-primary w-100" disabled="@(isLogging || shouldRedirect)">
                                @if (isLogging)
                                {
                                    <span>Вхожу...</span>
                                }
                                else
                                {
                                    <span>Войти</span>
                                }
                            </button>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    public LoginRequest loginRequest { get; set; } = new() { Email = "", Password = "" };
    
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    private bool isLogging;
    private bool shouldRedirect;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        // Проверяем, авторизован ли пользователь ТОЛЬКО при первой загрузке
        if (AuthenticationState != null)
        {
            try
            {
                var authState = await AuthenticationState;
                if (authState.User.Identity?.IsAuthenticated == true)
                {
                    Console.WriteLine("[Login] Пользователь уже авторизован, перенаправляем");
                    shouldRedirect = true;
                    StateHasChanged();
                    
                    // Добавляем небольшую задержку и используем forceLoad
                    await Task.Delay(100);
                    Navigation.NavigateTo("/groups", forceLoad: true);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[Login] Ошибка проверки авторизации: {ex.Message}");
                // Игнорируем ошибку и показываем форму входа
            }
        }
    }

    private async Task HandleLogin()
    {
        try
        {
            isLogging = true;
            errorMessage = "";
            StateHasChanged();

            Console.WriteLine("[Login] Начинаем процесс входа");

            var loginResponse = await AuthService.LoginAsync(loginRequest.Email, loginRequest.Password);
            
            if (loginResponse != null)
            {
                Console.WriteLine("[Login] Логин успешен, устанавливаем флаг перенаправления");
                shouldRedirect = true;
                StateHasChanged();
                
                // Даем время на обновление состояния авторизации
                await Task.Delay(500);
                
                Console.WriteLine("[Login] Выполняем перенаправление");
                Navigation.NavigateTo("/groups", forceLoad: true);
            }
            else
            {
                Console.WriteLine("[Login] Ошибка входа - неверные данные");
                errorMessage = "Неверные учетные данные";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Login] Исключение: {ex}");
            errorMessage = "Произошла ошибка при входе в систему";
        }
        finally
        {
            isLogging = false;
            StateHasChanged();
        }
    }
}