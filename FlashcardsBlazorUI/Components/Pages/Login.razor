@page "/"
@page "/login"
@using FlashcardsAppContracts.DTOs.Requests
@using FlashcardsBlazorUI.Services
@inject AuthService AuthService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Вход в систему</PageTitle>

@if (shouldRedirect)
{
    <script>window.location.href = '/groups';</script>
}

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h4>Вход в FlashCards</h4>
                </div>
                <div class="card-body">

                    @if (isLogging)
                    {
                        <div class="alert alert-info">
                            <div class="spinner-border spinner-border-sm me-2"></div>
                            Выполняется вход...
                        </div>
                    }
                    else
                    {
                        <!-- Отладочный вывод текущих значений -->
                        <p style="color:red">
                            DEBUG: Email=@loginRequest.Email |
                            PasswordLen=@(loginRequest.Password?.Length ?? 0)
                        </p>

                        <EditForm Model="loginRequest" OnValidSubmit="HandleLogin" FormName="LoginForm">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="alert alert-danger">@errorMessage</div>
                            }

                            <div class="mb-3">
                                <label class="form-label">Email:</label>
                                <InputText @bind-Value="loginRequest.Email"
                                           class="form-control"
                                           placeholder="Введите email" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Пароль:</label>
                                <InputText @bind-Value="loginRequest.Password"
                                           type="password"
                                           class="form-control"
                                           placeholder="Введите пароль" />
                            </div>

                            <button type="submit" class="btn btn-primary w-100" disabled="@isLogging">
                                @if (isLogging)
                                {
                                    <span>Вхожу...</span>
                                }
                                else
                                {
                                    <span>Войти</span>
                                }
                            </button>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    public LoginRequest loginRequest { get; set; } = new() { Email = "", Password = "" };
    
    private bool isLogging;
    private string errorMessage = "";
    private bool shouldRedirect;

    private async Task HandleLogin()
    {
        try
        {
            isLogging = true;
            errorMessage = "";
            StateHasChanged(); // Показываем индикатор загрузки
            
            await AuthService.LoginAsync(loginRequest);
            
            // Устанавливаем флаг для JavaScript редиректа
            shouldRedirect = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[SubmitError] {ex}");
            errorMessage = $"Ошибка входа: {ex.Message}";
        }
        finally
        {
            isLogging = false;
            if (!shouldRedirect) // Обновляем UI только если нет редиректа
            {
                StateHasChanged();
            }
        }
    }
}