@page "/study-settings"
@using FlashcardsAppContracts.DTOs.Requests
@using FlashcardsAppContracts.DTOs.Responses
@using FlashcardsAppContracts.Constants
@using FlashcardsBlazorUI.Services
@inject StudySessionService StudySessionService
@inject GroupStore GroupStore
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Настройки изучения</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3>Настройки изучения</h3>
        <button class="btn btn-outline-secondary" @onclick="GoBack">
            <span class="bi bi-arrow-left"></span> Назад
        </button>
    </div>

    @if (isLoading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Загрузка...</span>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-lg-8 mx-auto">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <EditForm Model="@settingsDto" OnValidSubmit="SaveSettings">
                            <DataAnnotationsValidator />
                            
                            <!-- Выбор группы -->
                            <div class="mb-4">
                                <label class="form-label fw-bold">Группа карточек</label>
                                <select class="form-select" @bind="selectedGroupId" @bind:after="OnGroupChanged">
                                    <option value="">Все группы (глобальные настройки)</option>
                                    @foreach (var group in GroupStore.Groups)
                                    {
                                        <option value="@group.Id">@group.GroupName</option>
                                    }
                                </select>
                                <small class="text-muted">
                                    @if (string.IsNullOrEmpty(selectedGroupId))
                                    {
                                        <span>Настройки будут применены ко всем группам по умолчанию</span>
                                    }
                                    else
                                    {
                                        <span>Настройки только для выбранной группы (переопределяют глобальные)</span>
                                    }
                                </small>
                            </div>

                            <hr class="my-4" />

                            <!-- Порядок изучения -->
                            <div class="mb-4">
                                <label class="form-label fw-bold">Порядок изучения</label>
                                <div class="btn-group w-100" role="group">
                                    <input type="radio" class="btn-check" name="studyOrder" id="orderRandom" 
                                           checked="@(settingsDto.StudyOrder == StudyOrder.Random)"
                                           @onchange="() => settingsDto.StudyOrder = StudyOrder.Random" />
                                    <label class="btn btn-outline-primary" for="orderRandom">
                                        <span class="bi bi-shuffle"></span> Случайно
                                    </label>

                                    <input type="radio" class="btn-check" name="studyOrder" id="orderDate" 
                                           checked="@(settingsDto.StudyOrder == StudyOrder.CreatedDate)"
                                           @onchange="() => settingsDto.StudyOrder = StudyOrder.CreatedDate" />
                                    <label class="btn btn-outline-primary" for="orderDate">
                                        <span class="bi bi-calendar"></span> По дате
                                    </label>

                                    <input type="radio" class="btn-check" name="studyOrder" id="orderRating" 
                                           checked="@(settingsDto.StudyOrder == StudyOrder.Rating)"
                                           @onchange="() => settingsDto.StudyOrder = StudyOrder.Rating" />
                                    <label class="btn btn-outline-primary" for="orderRating">
                                        <span class="bi bi-star"></span> По рейтингу
                                    </label>
                                </div>
                            </div>

                            <!-- Фильтр по рейтингу -->
                            <div class="mb-4">
                                <label class="form-label fw-bold">Фильтр по рейтингу карточек</label>
                                <div class="row g-3">
                                    <div class="col-md-6">
                                        <label class="form-label">Минимальный рейтинг</label>
                                        <select class="form-select" @bind="settingsDto.MinRating">
                                            @for (int i = 0; i <= 5; i++)
                                            {
                                                <option value="@i">@i @(i == 1 ? "звезда" : "звёзд")</option>
                                            }
                                        </select>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">Максимальный рейтинг</label>
                                        <select class="form-select" @bind="settingsDto.MaxRating">
                                            @for (int i = 0; i <= 5; i++)
                                            {
                                                <option value="@i">@i @(i == 1 ? "звезда" : "звёзд")</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                                <small class="text-muted">
                                    Будут показаны карточки с рейтингом от @settingsDto.MinRating до @settingsDto.MaxRating звёзд
                                </small>
                                <ValidationMessage For="@(() => settingsDto.MinRating)" />
                                <ValidationMessage For="@(() => settingsDto.MaxRating)" />
                            </div>

                            <!-- Порог завершения -->
                            <div class="mb-4">
                                <label class="form-label fw-bold">
                                    Порог завершения карточки: @settingsDto.CompletionThreshold ⭐
                                </label>
                                <input type="range" class="form-range" 
                                       min="1" max="5" step="1"
                                       @bind="settingsDto.CompletionThreshold" />
                                <small class="text-muted">
                                    Карточка считается изученной при достижении рейтинга @settingsDto.CompletionThreshold
                                </small>
                                <ValidationMessage For="@(() => settingsDto.CompletionThreshold)" />
                            </div>

                            <!-- Перемешивание при повторе -->
                            <div class="mb-4">
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" role="switch" 
                                           id="shuffleSwitch" @bind="settingsDto.ShuffleOnRepeat" />
                                    <label class="form-check-label fw-bold" for="shuffleSwitch">
                                        Перемешивать карточки при повторном изучении
                                    </label>
                                </div>
                                <small class="text-muted">
                                    При повторном изучении группы порядок карточек будет случайным
                                </small>
                            </div>

                            <hr class="my-4" />

                            <!-- Кнопки -->
                            <div class="d-flex gap-2 justify-content-end">
                                <button type="button" class="btn btn-outline-secondary" @onclick="GoBack">
                                    Отмена
                                </button>
                                <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                    @if (isSaving)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    }
                                    Сохранить
                                </button>
                            </div>

                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="alert alert-danger mt-3">
                                    @errorMessage
                                </div>
                            }

                            @if (saveSuccess)
                            {
                                <div class="alert alert-success mt-3">
                                    Настройки успешно сохранены!
                                </div>
                            }
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private CreateSettingsDto settingsDto = new();
    private string? selectedGroupId;
    private bool isLoading = true;
    private bool isSaving;
    private bool saveSuccess;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await GroupStore.RefreshAsync();
        await LoadSettings();
    }

    private async Task LoadSettings()
    {
        try
        {
            isLoading = true;
            // По умолчанию загружаем глобальные настройки
            await LoadSettingsForGroup(null);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка загрузки настроек: {ex.Message}");
            errorMessage = "Не удалось загрузить настройки";
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task OnGroupChanged()
    {
        // Конвертируем selectedGroupId в Guid? для settingsDto
        settingsDto.GroupId = string.IsNullOrEmpty(selectedGroupId) 
            ? null 
            : Guid.Parse(selectedGroupId);
        
        await LoadSettingsForGroup(settingsDto.GroupId);
    }

    private async Task LoadSettingsForGroup(Guid? groupId)
    {
        try
        {
            var settings = await StudySessionService.GetSettingsAsync(groupId);
        
            if (settings != null)
            {
                settingsDto.GroupId = settings.GroupId;
                settingsDto.MinRating = settings.MinRating;
                settingsDto.MaxRating = settings.MaxRating;
                settingsDto.StudyOrder = settings.StudyOrder;
                settingsDto.CompletionThreshold = settings.CompletionThreshold;
                settingsDto.ShuffleOnRepeat = settings.ShuffleOnRepeat;
                
                // Синхронизируем selectedGroupId с загруженными настройками
                selectedGroupId = settings.GroupId?.ToString() ?? "";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка загрузки настроек группы: {ex.Message}");
        }
    }
    
    private async Task SaveSettings()
    {
        try
        {
            isSaving = true;
            errorMessage = null;
            saveSuccess = false;
        
            var success = await StudySessionService.SaveSettingsAsync(settingsDto);
        
            if (success)
            {
                saveSuccess = true;
                // Автоматически скрываем сообщение об успехе через 3 секунды
                await Task.Delay(3000);
                saveSuccess = false;
            }
            else
            {
                errorMessage = "Не удалось сохранить настройки";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка сохранения: {ex.Message}");
            errorMessage = $"Ошибка: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }
    
    private void GoBack()
    {
        Navigation.NavigateTo("/groups");
    }
}