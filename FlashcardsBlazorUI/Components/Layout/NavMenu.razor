@using FlashcardsAppContracts.DTOs.Requests
@using FlashcardsAppContracts.DTOs.Responses
@using FlashcardsAppContracts.Constants
@using System.Linq
@using FlashcardsBlazorUI.Models
@using FlashcardsBlazorUI.Services
@inject GroupService GroupService
@inject CardService CardService
@inject AuthService AuthService
@inject IGroupOrderService GroupOrderService
@inject NavigationManager Navigation
@implements IDisposable
@rendermode InteractiveServer

<!-- Верхняя панель -->
<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">FlashcardsBlazorUI</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler"/>

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/login">
                <span class="bi bi-person-fill"></span> Вход
            </NavLink>
        </div>

        @if (AuthService.IsAuthenticated)
        {
            <div class="nav-item px-3">
                <div class="nav-link" @onclick="ToggleGroupsMenu" style="cursor:pointer;">
                    <span class="bi bi-collection-fill"></span>
                    Мои группы
                    <span class="bi @(isGroupsMenuExpanded ? "bi-chevron-down" : "bi-chevron-right")"
                          style="float:right;"></span>
                </div>

                @if (isGroupsMenuExpanded && groups != null)
                {
                    <div id="nav-groups-container" class="groups-submenu" style="margin-left:20px;">
                        @foreach (var group in groups.OrderBy(g => g.Order))
                        {
                            <div class="nav-link group-item nav-group-draggable"
                                 data-group-id="@group.Id"
                                 style="@GetGroupStyle(group)">
                                <span class="drag-handle" 
                                      style="cursor:grab; padding:8px; display:inline-flex; align-items:center; min-width:24px; margin-right:4px;"
                                      draggable="true">
                                    <i class="bi bi-grip-vertical"></i>
                                </span>
                                <span @onclick="() => OnGroupClick(group)" 
                                      @onclick:stopPropagation="true"
                                      style="flex-grow:1; cursor:pointer; user-select:none; overflow:hidden; text-overflow:ellipsis; white-space:nowrap;">
                                    @group.GroupName
                                </span>
                                <span style="display:inline-flex; align-items:center; flex-shrink:0; margin-left:8px;">
                                    <span class="bi @(IsGroupExpanded(group.Id) ? "bi-chevron-down" : "bi-chevron-right")"
                                          style="margin-right:8px; cursor:pointer; font-size:12px;"
                                          @onclick="() => OnGroupClick(group)"
                                          @onclick:stopPropagation="true">
                                    </span>
                                    <span class="bi bi-box-arrow-up-right" title="Открыть группу"
                                          style="cursor:pointer; font-size:12px;"
                                          @onclick="() => NavigateToGroup(group.Id)"
                                          @onclick:stopPropagation="true">
                                    </span>
                                </span>
                            </div>

                            @if (IsGroupExpanded(group.Id))
                            {
                                <div style="margin-left:20px;">
                                    @if (IsGroupLoaded(group.Id) && GetGroupCards(group.Id).Any())
                                    {
                                        @foreach (var card in GetGroupCards(group.Id))
                                        {
                                            <div class="nav-link"
                                                 style="color:#ccc; font-size:0.9em; padding:2px 8px; cursor:pointer;"
                                                 @onclick="@(() => OnCardClick(card.CardId))"
                                                 @onclick:stopPropagation="true">
                                                @card.Question
                                            </div>
                                        }
                                    }
                                    else if (!IsGroupLoading(group.Id))
                                    {
                                        <div class="nav-link" style="color:#999; font-size:0.9em; padding:2px 8px;">
                                            Нет карточек
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="nav-link" style="color:#999; font-size:0.9em; padding:2px 8px;">
                                            Загружаю...
                                        </div>
                                    }
                                </div>
                            }
                        }
                        
                        <DragDropInitializer ContainerSelector="#nav-groups-container" 
                                            ItemSelector=".nav-group-draggable"
                                            TrashSelector=".nav-trash-zone" />
                    </div>
                }
            </div>

            <div class="nav-item px-3">
                <div class="nav-link" @onclick="Logout" style="cursor:pointer;">
                    <span class="bi bi-box-arrow-right"></span> Выход
                </div>
            </div>
        }
    </nav>
</div>

<div class="position-fixed nav-trash-zone" style="bottom:30px; left:30px; z-index:1000; width:120px; height:120px;">
    <div class="card h-100 border-danger text-center" style="border-width:3px; border-style:dashed; background-color:rgba(255,255,255,0.95);">
        <div class="card-body d-flex flex-column align-items-center justify-content-center text-danger">
            <i class="bi bi-trash" style="font-size:32px; margin-bottom:5px;"></i>
            <small>Удалить</small>
        </div>
    </div>
</div>

@code {
    private bool isGroupsMenuExpanded;
    private List<ResultGroupDto>? groups;

    private Dictionary<Guid, bool> expandedGroups = new();
    private Dictionary<Guid, List<Card>> groupCards = new();
    private Dictionary<Guid, bool> loadingGroupCards = new();

    protected override async Task OnInitializedAsync()
    {
        GroupOrderService.OnGroupsReordered += RefreshGroups;
        
        if (AuthService.IsAuthenticated)
        {
            await LoadGroups();
        }
    }

    private async Task LoadGroups()
    {
        try
        {
            groups = await GroupService.GetGroupsAsync();
            Console.WriteLine($"NavMenu: Загружено групп: {groups?.Count ?? 0}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"NavMenu: Ошибка загрузки групп: {ex.Message}");
            groups = new List<ResultGroupDto>();
        }
        await InvokeAsync(StateHasChanged);
    }

    private async void RefreshGroups()
    {
        Console.WriteLine("NavMenu: RefreshGroups вызван");
        groups = null;
        await LoadGroups();
    }

    private async Task ToggleGroupsMenu() 
    {
        isGroupsMenuExpanded = !isGroupsMenuExpanded;
        if (isGroupsMenuExpanded && groups == null)
        {
            await LoadGroups();
        }
        Navigation.NavigateTo("/groups");
    }
    
    private void NavigateToGroup(Guid groupId)
    {
        Navigation.NavigateTo($"/groups/{groupId}/cards");
    }

    private async Task OnGroupClick(ResultGroupDto group)
    {
        var id = group.Id;
        var current = IsGroupExpanded(id);
        SetGroupExpanded(id, !current);
        Navigation.NavigateTo($"/groups/{id}/cards");

        if (IsGroupExpanded(id) && !IsGroupLoaded(id) && !IsGroupLoading(id))
        {
            await LoadCardsForGroup(id);
        }
    }

    private async Task LoadCardsForGroup(Guid groupId)
    {
        SetGroupLoading(groupId, true);
        try
        {
            var cards = await CardService.GetCardsAsync(groupId);
            groupCards[groupId] = cards;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка загрузки карточек для {groupId}: {ex.Message}");
            groupCards[groupId] = new List<Card>();
        }
        finally
        {
            SetGroupLoading(groupId, false);
            await InvokeAsync(StateHasChanged);
        }
    }

    private void OnCardClick(Guid cardId)
    {
        Navigation.NavigateTo($"/cards/{cardId}");
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        Navigation.NavigateTo("/login", forceLoad: true);
    }

    private bool IsGroupExpanded(Guid groupId) =>
        expandedGroups.TryGetValue(groupId, out var v) && v;

    private void SetGroupExpanded(Guid groupId, bool value) => expandedGroups[groupId] = value;

    private bool IsGroupLoaded(Guid groupId) => groupCards.ContainsKey(groupId);

    private List<Card> GetGroupCards(Guid groupId) =>
        groupCards.TryGetValue(groupId, out var list) ? list : new List<Card>();

    private bool IsGroupLoading(Guid groupId) =>
        loadingGroupCards.TryGetValue(groupId, out var loading) && loading;

    private void SetGroupLoading(Guid groupId, bool value) => loadingGroupCards[groupId] = value;

    private string GetGroupStyle(ResultGroupDto group)
    {
        return $"background-color:{GetColorCode(group.GroupColor)}; margin:2px 0; border-radius:4px; color:white; display:flex; justify-content:space-between; align-items:center; padding:6px 8px; transition:transform 0.15s ease, opacity 0.15s ease; user-select:none; touch-action:manipulation; position:relative;";
    }

    private string GetColorCode(GroupColor color) => color switch
    {
        GroupColor.Red => "#dc3545",
        GroupColor.Green => "#28a745",
        GroupColor.Yellow => "#ffc107",
        GroupColor.Orange => "#fd7e14",
        GroupColor.Purple => "#6f42c1",
        GroupColor.Pink => "#e83e8c",
        GroupColor.Black => "#343a40",
        _ => "#6c757d"
    };

    public void Dispose()
    {
        GroupOrderService.OnGroupsReordered -= RefreshGroups;
    }
}