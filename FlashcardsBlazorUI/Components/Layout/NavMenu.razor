@using FlashcardsAppContracts.DTOs.Responses
@using FlashcardsAppContracts.Constants
@using FlashcardsBlazorUI.Interfaces
@using System.Linq
@using FlashcardsBlazorUI.Models
@using FlashcardsBlazorUI.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject CardService CardService
@inject GroupStore GroupStore
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IAuthService AuthService

@implements IDisposable
@rendermode InteractiveServer

<!-- Верхняя панель -->
<div class="top-row ps-2 navbar navbar-dark">
    <div class="container-fluid d-flex justify-content-between align-items-center">
        <AuthorizeView>
            <Authorized>
                <a href="study-settings" class="text-white text-decoration-none" title="Настройки изучения">
                    <i class="bi bi-gear" style="font-size:1.2rem; margin:0 !important; top:0 !important; position:static !important;"></i>
                </a>
            </Authorized>
        </AuthorizeView>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler"/>

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    <div class="nav-link" @onclick="ToggleGroupsMenu" 
                         style="cursor:pointer; display:flex !important; align-items:center !important; line-height:normal !important;">
                        <i class="bi bi-collection-fill" 
                           style="margin-right:0.75rem !important; top:0 !important; position:static !important; vertical-align:baseline !important;"></i>
                        <span style="flex:1; line-height:normal;">Мои группы</span>
                        <i class="bi @(isGroupsMenuExpanded ? "bi-chevron-down" : "bi-chevron-right")"
                           style="margin:0 !important; top:0 !important; position:static !important; vertical-align:baseline !important;"></i>
                    </div>

                    @if (isGroupsMenuExpanded)
                    {
                        <div id="nav-groups-container" class="groups-submenu" style="margin-left:20px;">
                            @foreach (var group in GroupStore.Groups.OrderBy(g => g.Order))
                            {
                                <div class="nav-link group-item nav-group-draggable"
                                     data-group-id="@group.Id"
                                     @key="@($"{group.Id}-{group.Order}")"
                                     style="@GetGroupStyle(group)">
     
                                    <i class="bi bi-grip-vertical drag-handle" 
                                       style="cursor:grab; margin:0 !important; width:auto !important; top:0 !important; flex-shrink:0;"></i>
    
                                    <span @onclick="() => OnGroupClick(group)" 
                                          @onclick:stopPropagation="true"
                                          title="@group.GroupName"
                                          style="flex:1; min-width:0; cursor:pointer; user-select:none; overflow:hidden; text-overflow:ellipsis; white-space:nowrap; line-height:normal;">
                                        @group.GroupName
                                    </span>
    
                                    <span style="display:inline-flex; align-items:center; gap:4px; flex-shrink:0; line-height:normal;">
                                        <i class="bi @(IsGroupExpanded(group.Id) ? "bi-chevron-down" : "bi-chevron-right")"
                                           style="cursor:pointer; margin:0 !important; width:auto !important; top:0 !important;"
                                           @onclick="() => OnGroupClick(group)"
                                           @onclick:stopPropagation="true"></i>
                                        <i class="bi bi-box-arrow-up-right" 
                                           title="Открыть группу"
                                           style="cursor:pointer; margin:0 !important; width:auto !important; top:0 !important;"
                                           @onclick="() => NavigateToGroup(group.Id)"
                                           @onclick:stopPropagation="true"></i>
                                    </span>
                                </div>

                                @if (IsGroupExpanded(group.Id))
                                {
                                    <div style="margin-left:16px; margin-top:6px;">
                                        @if (IsGroupLoaded(group.Id) && GetGroupCards(group.Id).Any())
                                        {
                                            @foreach (var card in GetGroupCards(group.Id))
                                            {
                                                <div class="@(activeCardId == card.CardId ? "card-item-active" : "")"
                                                     style="background-color:rgba(255,255,255,0.08); margin:3px 0; padding:6px 8px; border-radius:3px; cursor:pointer; font-size:0.85em; line-height:1.3; color:#d0d0d0; border-left:2px solid rgba(255,255,255,0.2); display:block; word-wrap:break-word; transition: all 0.2s ease;"
                                                     @onclick="@(() => OnCardClick(card.CardId))"
                                                     @onclick:stopPropagation="true">
                                                    @card.Question
                                                </div>
                                            }
                                        }
                                        else if (!IsGroupLoading(group.Id))
                                        {
                                            <div style="color:#999; font-size:0.85em; padding:6px 8px; margin:3px 0; font-style:italic;">
                                                Нет карточек
                                            </div>
                                        }
                                        else
                                        {
                                            <div style="color:#999; font-size:0.85em; padding:6px 8px; margin:3px 0; font-style:italic;">
                                                Загружаю...
                                            </div>
                                        }
                                    </div>
                                }
                            }
                        </div>
                    }
                </div>
            </Authorized>
        </AuthorizeView>
    </nav>
</div>


@code {
    
    
    private bool isGroupsMenuExpanded;
    private Guid? activeCardId;

    private async Task<bool> GetGroupsMenuState()
    {
        try
        {
            var state = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "groupsMenuExpanded");
            return state == "true";
        }
        catch
        {
            return false;
        }
    }

    private async Task SetGroupsMenuState(bool state)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "groupsMenuExpanded", state.ToString().ToLower());
        }
        catch
        {
            // игнорируем ошибки localStorage
        }
    }
    
    private readonly Dictionary<Guid, bool> expandedGroups = new();
    private readonly Dictionary<Guid, List<Card>> groupCards = new();
    private readonly Dictionary<Guid, bool> loadingGroupCards = new();

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        isGroupsMenuExpanded = await GetGroupsMenuState(); 
        GroupStore.GroupsChanged += HandleGroupsChanged;

        if (AuthenticationStateTask != null)
        {
            var authState = await AuthenticationStateTask;
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                await GroupStore.RefreshAsync();
            }
        }
    }

    private void HandleGroupsChanged()
    {
        InvokeAsync(async () =>
        {
            StateHasChanged();
        
            if (isGroupsMenuExpanded)
            {
                await Task.Delay(200);
                await ReinitializeDragDrop();
            }
        });
    }
    
    private async Task ReinitializeDragDrop()
    {
        try
        {
            var token = await AuthService.GetTokenAsync();
            
            if (!string.IsNullOrEmpty(token))
            {
                await JSRuntime.InvokeVoidAsync("dragDropInterop.initializeDragDrop",
                    token,
                    "#nav-groups-container",
                    ".nav-group-draggable",
                    "http://localhost:5153/api/group/reorder");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"NavMenu: Ошибка реинициализации drag&drop: {ex.Message}");
        }
    }

    private async Task ToggleGroupsMenu()
    {
        isGroupsMenuExpanded = !isGroupsMenuExpanded;
        await SetGroupsMenuState(isGroupsMenuExpanded); 
        if (isGroupsMenuExpanded && !GroupStore.Groups.Any())
        {
            await GroupStore.RefreshAsync();
        }
        
        if (isGroupsMenuExpanded)
        {
            await Task.Delay(100);
            await ReinitializeDragDrop();
        }
        
        Navigation.NavigateTo("/groups");
    }

    private void NavigateToGroup(Guid groupId) =>
        Navigation.NavigateTo($"/groups/{groupId}/cards");

    private async Task OnGroupClick(ResultGroupDto group)
    {
        var id = group.Id;
        SetGroupExpanded(id, !IsGroupExpanded(id));
        // Убрал перенаправление - теперь только раскрываем/сворачиваем список карточек
        // Navigation.NavigateTo($"/groups/{id}/cards");

        if (IsGroupExpanded(id) && !IsGroupLoaded(id) && !IsGroupLoading(id))
            await LoadCardsForGroup(id);
    }

    private async Task LoadCardsForGroup(Guid groupId)
    {
        SetGroupLoading(groupId, true);
        try
        {
            groupCards[groupId] = await CardService.GetCardsAsync(groupId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"NavMenu: ошибка загрузки карточек {groupId}: {ex.Message}");
            groupCards[groupId] = new List<Card>();
        }
        finally
        {
            SetGroupLoading(groupId, false);
            await InvokeAsync(StateHasChanged);
        }
    }

    private void OnCardClick(Guid cardId)
    {
        activeCardId = cardId;
        Navigation.NavigateTo($"/cards/{cardId}");
    }

    private bool IsGroupExpanded(Guid id) =>
        expandedGroups.TryGetValue(id, out var v) && v;
    private void SetGroupExpanded(Guid id, bool v) => expandedGroups[id] = v;

    private bool IsGroupLoaded(Guid id) => groupCards.ContainsKey(id);
    private List<Card> GetGroupCards(Guid id) =>
        groupCards.TryGetValue(id, out var list) ? list : new List<Card>();

    private bool IsGroupLoading(Guid id) =>
        loadingGroupCards.TryGetValue(id, out var v) && v;
    private void SetGroupLoading(Guid id, bool v) => loadingGroupCards[id] = v;

    private string GetGroupStyle(ResultGroupDto g) =>
        $"background-color:{GetColorCode(g.GroupColor)}; margin:2px 0; border-radius:4px; color:white; display:flex !important; align-items:center !important; padding:8px !important; gap:10px; transition:transform 0.15s ease, opacity 0.15s ease; user-select:none; touch-action:manipulation; line-height:normal !important;";
    
    private string GetColorCode(GroupColor c) => c switch
    {
        GroupColor.Red => "#dc3545",
        GroupColor.Green => "#28a745",
        GroupColor.Yellow => "#ffc107",
        GroupColor.Orange => "#fd7e14",
        GroupColor.Purple => "#6f42c1",
        GroupColor.Pink => "#e83e8c",
        GroupColor.Black => "#343a40",
        _ => "#6c757d"
    };

    public void Dispose() =>
        GroupStore.GroupsChanged -= HandleGroupsChanged;
}