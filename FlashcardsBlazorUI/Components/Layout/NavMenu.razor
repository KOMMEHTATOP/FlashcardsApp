@using FlashcardsAppContracts.DTOs.Requests
@using FlashcardsAppContracts.DTOs.Responses
@using FlashcardsAppContracts.Constants
@using System.Linq
@using FlashcardsBlazorUI.Models
@using FlashcardsBlazorUI.Services
@inject GroupService GroupService
@inject CardService CardService
@inject AuthService AuthService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<!-- Верхняя панель -->
<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">FlashcardsBlazorUI</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler"/>

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/login">
                <span class="bi bi-person-fill"></span> Вход
            </NavLink>
        </div>

        @if (AuthService.IsAuthenticated)
        {
            <div class="nav-item px-3">
                <div class="nav-link" @onclick="ToggleGroupsMenu" style="cursor:pointer;">
                    <span class="bi bi-collection-fill"></span>
                    Мои группы
                    <span class="bi @(isGroupsMenuExpanded ? "bi-chevron-down" : "bi-chevron-right")"
                          style="float:right;"></span>
                </div>

                @if (isGroupsMenuExpanded && groups != null)
                {
                    <div class="groups-submenu" style="margin-left:20px;">
                        @foreach (var group in groups.OrderBy(g => g.Order))
                        {
                            <div class="nav-link group-item"
                                 draggable="true"
                                 @ondragstart="EventCallback.Factory.Create<DragEventArgs>(this, e => OnDragStart(e, group))"
                                 @ondragend="OnDragEnd"
                                 @ondragenter="OnDragEnter" @ondragenter:preventDefault="true"
                                 @ondragover="OnDragOver" @ondragover:preventDefault="true"
                                 @ondrop="EventCallback.Factory.Create<DragEventArgs>(this, e => OnDrop(e, group))"
                                 style="@GetGroupStyle(group)"
                                 @onclick="() => OnGroupClick(group)">
                                <span>@group.GroupName</span>

                                <span style="float:right; display:inline-flex; align-items:center;">
                                    <span class="bi @(IsGroupExpanded(group.Id) ? "bi-chevron-down" : "bi-chevron-right")"
                                          style="margin-right:8px;">
                                    </span>

                                    <span class="bi bi-box-arrow-up-right" title="Открыть группу"
                                          style="cursor:pointer;"
                                          @onclick="() => NavigateToGroup(group.Id)"
                                          @onclick:stopPropagation="true">
                                    </span>
                                </span>
                            </div>

                            @if (IsGroupExpanded(group.Id))
                            {
                                <div style="margin-left:20px;">
                                    @if (IsGroupLoaded(group.Id) && GetGroupCards(group.Id).Any())
                                    {
                                        @foreach (var card in GetGroupCards(group.Id))
                                        {
                                            <div class="nav-link"
                                                 style="color:#ccc; font-size:0.9em; padding:2px 8px; cursor:pointer;"
                                                 @onclick="@(() => OnCardClick(card.CardId))"
                                                 @onclick:stopPropagation="true">
                                                @card.Question
                                            </div>
                                        }
                                    }
                                    else if (!IsGroupLoading(group.Id))
                                    {
                                        <div class="nav-link" style="color:#999; font-size:0.9em; padding:2px 8px;">
                                            Нет карточек
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="nav-link" style="color:#999; font-size:0.9em; padding:2px 8px;">
                                            Загружаю...
                                        </div>
                                    }
                                </div>
                            }
                        }
                    </div>
                }
            </div>

            <div class="nav-item px-3">
                <div class="nav-link" @onclick="Logout" style="cursor:pointer;">
                    <span class="bi bi-box-arrow-right"></span> Выход
                </div>
            </div>
        }
    </nav>
</div>

@code {
    private bool isGroupsMenuExpanded;
    private List<ResultGroupDto>? groups;

    // Drag state
    private ResultGroupDto? draggedGroup;
    private bool isDragging;

    // Expand / cards (ключи - Guid)
    private Dictionary<Guid, bool> expandedGroups = new();
    private Dictionary<Guid, List<Card>> groupCards = new();
    private Dictionary<Guid, bool> loadingGroupCards = new();

    protected override async Task OnInitializedAsync()
    {
        if (AuthService.IsAuthenticated)
        {
            await LoadGroups();
        }
    }

    private async Task LoadGroups()
    {
        try
        {
            groups = await GroupService.GetGroupsAsync();
            Console.WriteLine($"Загружено групп: {groups?.Count ?? 0}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка загрузки групп: {ex.Message}");
            groups = new List<ResultGroupDto>();
        }
    }

    private async Task ToggleGroupsMenu() 
    {
        isGroupsMenuExpanded = !isGroupsMenuExpanded;
    
        // Переходим на страницу групп
        Navigation.NavigateTo("/groups");
    }
    
    private void NavigateToGroup(Guid groupId)
    {
        // Переход на страницу списка карточек для группы
        Navigation.NavigateTo($"/groups/{groupId}/cards");
    }

    private async Task OnGroupClick(ResultGroupDto group)
    {
        if (isDragging) return;

        var id = group.Id;
        var current = IsGroupExpanded(id);
        SetGroupExpanded(id, !current);
        Navigation.NavigateTo($"/groups/{id}/cards");

        if (IsGroupExpanded(id) && !IsGroupLoaded(id) && !IsGroupLoading(id))
        {
            await LoadCardsForGroup(id);
        }
    }

    private async Task LoadCardsForGroup(Guid groupId)
    {
        SetGroupLoading(groupId, true);
        try
        {
            var cards = await CardService.GetCardsAsync(groupId);
            groupCards[groupId] = cards;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка загрузки карточек для {groupId}: {ex.Message}");
            groupCards[groupId] = new List<Card>();
        }
        finally
        {
            SetGroupLoading(groupId, false);
            await InvokeAsync(StateHasChanged);
        }
    }

    private void OnCardClick(Guid cardId)
    {
        Navigation.NavigateTo($"/cards/{cardId}");
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        Navigation.NavigateTo("/login", forceLoad: true);
    }

    // --- Drag & Drop handlers ---
    private void OnDragStart(DragEventArgs e, ResultGroupDto group)
    {
        draggedGroup = group;
        isDragging = true;
        Console.WriteLine($"[DRAG] START {group.GroupName}");
    }

    private async Task OnDragEnd(DragEventArgs e)
    {
        // небольшой таймаут, чтобы не было ложных кликов сразу после drag
        await Task.Delay(60);
        isDragging = false;
        draggedGroup = null;
        Console.WriteLine("[DRAG] END");
        await InvokeAsync(StateHasChanged);
    }

    private void OnDragEnter(DragEventArgs e)
    {
        Console.WriteLine("[DRAG] ENTER");
    }

    private void OnDragOver(DragEventArgs e)
    {
        Console.WriteLine("[DRAG] OVER");
    }

    private async Task OnDrop(DragEventArgs e, ResultGroupDto targetGroup)
    {
        Console.WriteLine($"[DRAG] DROP target={targetGroup.GroupName}");

        if (draggedGroup != null && draggedGroup.Id != targetGroup.Id)
        {
            await ReorderGroups(draggedGroup, targetGroup);
        }

        // завершение drag
        isDragging = false;
        draggedGroup = null;
        await InvokeAsync(StateHasChanged);
    }

    private async Task ReorderGroups(ResultGroupDto dragged, ResultGroupDto target)
    {
        if (groups == null) return;

        var draggedIndex = groups.FindIndex(g => g.Id == dragged.Id);
        var targetIndex = groups.FindIndex(g => g.Id == target.Id);
        if (draggedIndex == -1 || targetIndex == -1) return;

        var moved = groups[draggedIndex];
        groups.RemoveAt(draggedIndex);
        groups.Insert(targetIndex, moved);

        var reorderList = groups
            .Select((g, i) => new ReorderGroupDto { Id = g.Id, Order = i })
            .ToList();

        try
        {
            var ok = await GroupService.UpdateGroupOrderAsync(reorderList);

            if (!ok)
            {
                Console.WriteLine("Ошибка обновления порядка — перезагружаю группы");
                await LoadGroups();
            }
            else
            {
                Console.WriteLine("Порядок обновлён");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при обновлении порядка: {ex.Message}");
            await LoadGroups();
        }

        await InvokeAsync(StateHasChanged);
    }

    // --- Helpers for dictionary access (avoid GetValueOrDefault issues) ---
    private bool IsGroupExpanded(Guid groupId) =>
        expandedGroups.TryGetValue(groupId, out var v) && v;

    private void SetGroupExpanded(Guid groupId, bool value) => expandedGroups[groupId] = value;

    private bool IsGroupLoaded(Guid groupId) => groupCards.ContainsKey(groupId);

    private List<Card> GetGroupCards(Guid groupId) =>
        groupCards.TryGetValue(groupId, out var list) ? list : new List<Card>();

    private bool IsGroupLoading(Guid groupId) =>
        loadingGroupCards.TryGetValue(groupId, out var loading) && loading;

    private void SetGroupLoading(Guid groupId, bool value) => loadingGroupCards[groupId] = value;

    // Вспомогательные стили: добавляем лёгкий эффект для перетаскиваемого элемента
    private string GetGroupStyle(ResultGroupDto group)
    {
        var baseStyle = $"background-color:{GetColorCode(group.GroupColor)}; margin:2px 0; border-radius:4px; color:white; cursor:move; display:flex; justify-content:space-between; align-items:center; padding:6px 8px;";

        baseStyle += (draggedGroup?.Id == group.Id)
            ? " opacity:0.7; transform:scale(1.02); transition:transform 0.15s ease, opacity 0.15s ease;"
            : " transition:transform 0.15s ease, opacity 0.15s ease;";

        return baseStyle;
    }

    private string GetColorCode(GroupColor color) => color switch
    {
        GroupColor.Red => "#dc3545",
        GroupColor.Green => "#28a745",
        GroupColor.Yellow => "#ffc107",
        GroupColor.Orange => "#fd7e14",
        GroupColor.Purple => "#6f42c1",
        GroupColor.Pink => "#e83e8c",
        GroupColor.Black => "#343a40",
        _ => "#6c757d"
    };
}