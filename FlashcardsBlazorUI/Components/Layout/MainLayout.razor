@using FlashcardsBlazorUI.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IDisposable
@inherits LayoutComponentBase

@{
    var authState = AuthenticationStateProvider.GetAuthenticationStateAsync().GetAwaiter().GetResult();
    var isAuth = authState.User.Identity?.IsAuthenticated ?? false;
}
<p style="background: red; color: white; padding: 10px;">DEBUG: Авторизован = @isAuth, User: @authState.User.Identity?.Name</p>

<div class="page">
    <div class="sidebar">
        <NavMenu/>
    </div>

    <main>
        <div class="top-row ps-3 navbar navbar-dark">
            <div class="container-fluid d-flex justify-content-end">
                <div class="auth-section">
                    <AuthorizeView>
                        <NotAuthorized>
                            <NavLink class="btn btn-outline-light btn-sm auth-button" href="/login">
                                <span class="bi bi-person-fill"></span> Вход
                            </NavLink>
                        </NotAuthorized>
                        <Authorized>
                            <span class="text-light me-3">@context.User.Identity?.Name</span>
                            <button class="btn btn-outline-light btn-sm" @onclick="Logout">
                                <span class="bi bi-box-arrow-right"></span> Выход
                            </button>
                        </Authorized>
                    </AuthorizeView>
                </div>
            </div>
        </div>
        <article class="content px-4">
            @Body
        </article>
    </main>
    <!-- подключаем dragdrop JS -->
    <script src="js/dragdrop.js"></script>
</div>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
    
        // Добавить эту проверку:
        if (AuthenticationStateTask != null)
        {
            var authState = await AuthenticationStateTask;
            // Принудительно обновляем состояние
            StateHasChanged();
        }
    
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Дополнительное обновление после первого рендера
            await Task.Delay(100);
            await InvokeAsync(StateHasChanged);
        }
    }

    private void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        InvokeAsync(() => {
            StateHasChanged();
            return Task.CompletedTask;
        });
    }

    private async Task Logout()
    {
        Console.WriteLine("[MainLayout] Logout вызван");
        await AuthService.LogoutAsync();
        Navigation.NavigateTo("/login", forceLoad: true);
    }

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}