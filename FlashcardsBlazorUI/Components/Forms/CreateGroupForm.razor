@using FlashcardsAppContracts.DTOs.Requests
@using FlashcardsAppContracts.Constants
@using FlashcardsBlazorUI.Services
@inject GroupService GroupService

<div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Создать новую группу</h5>
                <button type="button" class="btn-close" @onclick="OnCancel"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="newGroup" OnValidSubmit="HandleSubmit" FormName="CreateGroup">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>

                    <div class="mb-3">
                        <label class="form-label">Название группы:</label>
                        <InputText @bind-Value="newGroup.Name" class="form-control" placeholder="Введите название группы"/>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Цвет группы:</label>
                        <InputSelect @bind-Value="newGroup.Color" class="form-select">
                            <option value="">Выберите цвет</option>
                            @foreach (GroupColor color in Enum.GetValues<GroupColor>())
                            {
                                <option value="@color">@GetColorDisplayName(color)</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="OnCancel">Отмена</button>
                        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                            @if (isSubmitting)
                            {
                                <span>Создаю...</span>
                            }
                            else
                            {
                                <span>Создать</span>
                            }
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback OnGroupCreated { get; set; }

    private CreateGroupDto newGroup = new() 
    { 
        Name = "", 
        Color = GroupColor.Green, 
        Order = 0 
    };
    private bool isSubmitting;

    private async Task HandleSubmit()
    {
        try
        {
            isSubmitting = true;
            await GroupService.CreateGroupAsync(newGroup);
            await OnGroupCreated.InvokeAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка создания группы: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private string GetColorDisplayName(GroupColor color) => color switch
    {
        GroupColor.Black => "Черный",
        GroupColor.Red => "Красный",
        GroupColor.Green => "Зеленый",
        GroupColor.Yellow => "Желтый",
        GroupColor.Orange => "Оранжевый",
        GroupColor.Purple => "Фиолетовый",
        GroupColor.Pink => "Розовый",
        _ => color.ToString()
    };
}