@using Microsoft.AspNetCore.Components.Authorization
@inject IJSRuntime JSRuntime
@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthStateProvider

@code {
    [Parameter] public string ContainerSelector { get; set; } = "#groups-container";
    [Parameter] public string ItemSelector { get; set; } = ".group-card";
    [Parameter] public string ApiEndpoint { get; set; } = "/api/group/reorder";
    [Parameter] public string TrashSelector { get; set; } = ".trash-zone";
    
    private bool _initialized;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_initialized)
        {
            _initialized = true;
            await Task.Delay(50); // ждём пока DOM нарисуется
            try
            {
                // Получаем токен из AuthenticationStateProvider
                var authState = await AuthStateProvider.GetAuthenticationStateAsync();
                var tokenClaim = authState.User.FindFirst("jwt_token");
                
                if (tokenClaim != null)
                {
                    // Получаем полный URL из HttpClient
                    var httpClient = HttpClientFactory.CreateClient("FlashcardsAPI");
                    var fullApiEndpoint = $"{httpClient.BaseAddress?.ToString().TrimEnd('/')}{ApiEndpoint}";
                    
                    await JSRuntime.InvokeVoidAsync("dragDropInterop.initializeDragDrop", 
                        tokenClaim.Value, ContainerSelector, ItemSelector, fullApiEndpoint, TrashSelector);
                }
                else
                {
                    Console.WriteLine("DragDropInitializer: Токен не найден");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"DragDropInitializer: JS init failed: {ex.Message}");
            }
        }
    }
}