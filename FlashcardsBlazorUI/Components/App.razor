@inject Services.AuthService Auth
@inject NavigationManager Navigation

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <base href="/"/>
    <link rel="stylesheet" href="@Assets["lib/bootstrap/dist/css/bootstrap.min.css"]"/>
    <link rel="stylesheet" href="@Assets["app.css"]"/>
    <link rel="stylesheet" href="@Assets["FlashcardsBlazorUI.styles.css"]"/>
    <ImportMap/>
    <link rel="icon" type="image/png" href="favicon.png"/>
    <HeadOutlet/>
</head>

<body>
<Routes/>
<script src="_framework/blazor.web.js"></script>

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine($"[App.razor] OnAfterRenderAsync firstRender: {firstRender}");
        
        if (firstRender)
        {
            await Auth.InitializeAsync();
            Console.WriteLine($"[App.razor] IsAuthenticated: {Auth.IsAuthenticated}");
                
            var currentPath = Navigation.ToBaseRelativePath(Navigation.Uri);
            Console.WriteLine($"[App.razor] currentPath: '{currentPath}'");
                
            if (!Auth.IsAuthenticated && currentPath != "login" && currentPath != "")
            {
                Console.WriteLine("[App.razor] Navigating to /login");
                Navigation.NavigateTo("/login", true);
            }
            else if (Auth.IsAuthenticated && (currentPath == "login" || currentPath == ""))
            {
                Console.WriteLine("[App.razor] Navigating to /groups");
                Navigation.NavigateTo("/groups", true);
            }
        }
    }
}
</body>
</html>