using FlashcardsApp.Data;
using FlashcardsAppContracts.DTOs.Responses;
using Microsoft.EntityFrameworkCore;

namespace FlashcardsApp.Services;

public class GamificationService
{
    private readonly ApplicationDbContext _context;

    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ (–ø–æ—Ç–æ–º –≤—ã–Ω–µ—Å–µ—à—å –≤ appsettings.json)
    private const int BASE_XP = 10;

    public GamificationService(ApplicationDbContext context)
    {
        _context = context;
    }

    /// <summary>
    /// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç XP –∑–∞ –∏–∑—É—á–µ–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    /// </summary>
    public async Task<int> CalculateXPForCardAsync(Guid userId, Guid cardId, int rating)
    {
        // 1. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ (–Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏)
        var difficultyMultiplier = await CalculateDifficultyMultiplierAsync(userId, cardId);

        // 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ (–æ—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        var qualityMultiplier = CalculateQualityMultiplier(rating);

        // 3. –ü–æ–ª—É—á–∞–µ–º streak –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–æ–Ω—É—Å–∞
        var userStats = await _context.UserStatistics
            .AsNoTracking()
            .FirstOrDefaultAsync(us => us.UserId == userId);
        
        var streakBonus = CalculateStreakBonus(userStats?.CurrentStreak ?? 0);

        // 4. –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç
        var xp = (int)(BASE_XP * difficultyMultiplier * qualityMultiplier * streakBonus);

        return xp;
    }

    /// <summary>
    /// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑—É—á–µ–Ω–∏—è
    /// </summary>
    private async Task<double> CalculateDifficultyMultiplierAsync(Guid userId, Guid cardId)
    {
        // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—Ü–µ–Ω–æ–∫ —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        var recentRatings = await _context.StudyHistory
            .Where(sh => sh.UserId == userId && sh.CardId == cardId)
            .OrderByDescending(sh => sh.StudiedAt)
            .Take(5)
            .Select(sh => sh.Rating)
            .ToListAsync();

        if (!recentRatings.Any())
            return 1.0; // –°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏

        var averageRating = recentRatings.Average();

        // –ß–µ–º –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞, —Ç–µ–º —Å–ª–æ–∂–Ω–µ–µ –∫–∞—Ä—Ç–æ—á–∫–∞ ‚Üí –±–æ–ª—å—à–µ XP
        return averageRating switch
        {
            >= 4.0 => 0.8,   // –õ–µ–≥–∫–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
            >= 2.5 => 1.0,   // –°—Ä–µ–¥–Ω—è—è
            _ => 1.5         // –°–ª–æ–∂–Ω–∞—è
        };
    }

    /// <summary>
    /// –ú–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ü–µ–Ω–∫–∏ (1-5)
    /// </summary>
    private double CalculateQualityMultiplier(int rating)
    {
        return rating switch
        {
            5 => 1.5,  // –û—Ç–ª–∏—á–Ω–æ –∑–Ω–∞—é
            4 => 1.2,
            3 => 1.0,  // –ù–æ—Ä–º–∞–ª—å–Ω–æ
            2 => 0.7,
            1 => 0.5,  // –°–æ–≤—Å–µ–º –Ω–µ –∑–Ω–∞—é
            _ => 1.0
        };
    }

    /// <summary>
    /// –ë–æ–Ω—É—Å –∑–∞ streak (—á–µ–º –¥–æ–ª—å—à–µ streak, —Ç–µ–º –±–æ–ª—å—à–µ –±–æ–Ω—É—Å)
    /// </summary>
    private double CalculateStreakBonus(int currentStreak)
    {
        return currentStreak switch
        {
            >= 30 => 1.5,   // –ú–µ—Å—è—Ü –ø–æ–¥—Ä—è–¥!
            >= 14 => 1.25,  // –î–≤–µ –Ω–µ–¥–µ–ª–∏
            >= 7 => 1.1,    // –ù–µ–¥–µ–ª—è
            _ => 1.0        // –ù–µ—Ç –±–æ–Ω—É—Å–∞
        };
    }
    
    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    /// </summary>
    public async Task<ServiceResult<MotivationalMessageDto>> GetMotivationalMessageAsync(Guid userId)
    {
        var userStats = await _context.UserStatistics
            .AsNoTracking()
            .FirstOrDefaultAsync(us => us.UserId == userId);

        if (userStats == null)
        {
            return ServiceResult<MotivationalMessageDto>.Failure("User statistics not found");
        }

        var xpForNextLevel = CalculateXPForLevel(userStats.Level + 1);
        var xpNeeded = xpForNextLevel - userStats.TotalXP;

        MotivationalMessageDto message;

        // –ë–ª–∏–∑–∫–æ –∫ –Ω–æ–≤–æ–º—É —É—Ä–æ–≤–Ω—é (–º–µ–Ω–µ–µ 200 XP)
        if (xpNeeded < 200)
        {
            var cardsNeeded = (int)Math.Ceiling(xpNeeded / 10.0);
            message = new MotivationalMessageDto
            {
                Message = $"–ü–æ—á—Ç–∏ —Ç–∞–º! –ò–∑—É—á–∏ –µ—â–µ {cardsNeeded} –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è —É—Ä–æ–≤–Ω—è {userStats.Level + 1}!",
                Icon = "üöÄ",
                Type = "level"
            };
        }
        // –ê–∫—Ç–∏–≤–Ω—ã–π streak (7+ –¥–Ω–µ–π)
        else if (userStats.CurrentStreak >= 7)
        {
            message = new MotivationalMessageDto
            {
                Message = $"–û—Ç–ª–∏—á–Ω—ã–π streak! {userStats.CurrentStreak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!",
                Icon = "üî•",
                Type = "streak"
            };
        }
        // –û–±—ã—á–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è –¥–æ —É—Ä–æ–≤–Ω—è
        else
        {
            message = new MotivationalMessageDto
            {
                Message = $"–ü—Ä–æ–¥–æ–ª–∂–∞–π –∏–¥—Ç–∏! –í—Å–µ–≥–æ {xpNeeded} –æ—á–∫–æ–≤ –¥–æ —É—Ä–æ–≤–Ω—è {userStats.Level + 1}!",
                Icon = "üéØ",
                Type = "level"
            };
        }

        return ServiceResult<MotivationalMessageDto>.Success(message);
    }
    
    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç XP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç level up
    /// </summary>
    public async Task<ServiceResult<(bool leveledUp, int? newLevel)>> AddXPToUserAsync(Guid userId, int xp)
    {
        var userStats = await _context.UserStatistics.FirstOrDefaultAsync(us => us.UserId == userId);
        
        if (userStats == null)
        {
            return ServiceResult<(bool, int?)>.Failure("User statistics not found");
        }

        var oldLevel = userStats.Level;
        userStats.TotalXP += xp;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
        var newLevel = CalculateLevelFromXP(userStats.TotalXP);
        var leveledUp = newLevel > oldLevel;

        if (leveledUp)
        {
            userStats.Level = newLevel;
        }

        await _context.SaveChangesAsync();

        return ServiceResult<(bool leveledUp, int? newLevel)>.Success((leveledUp, leveledUp ? newLevel : null));
    }

    /// <summary>
    /// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ XP –Ω—É–∂–Ω–æ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
    /// </summary>
    public int CalculateXPForLevel(int level)
    {
        if (level == 1) return 0;
        if (level <= 10) return 100 * level;  // –ë—ã—Å—Ç—Ä—ã–π —Ä–æ—Å—Ç –≤ –Ω–∞—á–∞–ª–µ
        if (level <= 25) return 100 * level + 50 * (level - 10);
        return 100 * level + 50 * 15 + 100 * (level - 25);
    }

    /// <summary>
    /// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∏–∑ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ XP
    /// </summary>
    private int CalculateLevelFromXP(int totalXP)
    {
        int level = 1;
        while (CalculateXPForLevel(level + 1) <= totalXP)
        {
            level++;
        }
        return level;
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç streak –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    /// </summary>
    public async Task<ServiceResult<bool>> UpdateStreakAsync(Guid userId)
    {
        var userStats = await _context.UserStatistics.FirstOrDefaultAsync(us => us.UserId == userId);
        
        if (userStats == null)
        {
            return ServiceResult<bool>.Failure("User statistics not found");
        }

        var today = DateTime.UtcNow.Date;
        var lastStudyDate = userStats.LastStudyDate.Date;
        var daysDifference = (today - lastStudyDate).Days;

        bool streakIncreased = false;

        if (daysDifference == 0)
        {
            // –£–∂–µ –∑–∞–Ω–∏–º–∞–ª—Å—è —Å–µ–≥–æ–¥–Ω—è, streak –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
            streakIncreased = false;
        }
        else if (daysDifference == 1)
        {
            // –ó–∞–Ω–∏–º–∞–ª—Å—è –≤—á–µ—Ä–∞, streak –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
            userStats.CurrentStreak++;
            streakIncreased = true;
            
            if (userStats.CurrentStreak > userStats.BestStreak)
                userStats.BestStreak = userStats.CurrentStreak;
        }
        else
        {
            // –ü—Ä–æ–ø—É—Å–∫ –±–æ–ª–µ–µ 1 –¥–Ω—è - streak –æ–±–Ω—É–ª—è–µ—Ç—Å—è
            userStats.CurrentStreak = 1;
            streakIncreased = false;
        }

        userStats.LastStudyDate = today;
        await _context.SaveChangesAsync();

        return ServiceResult<bool>.Success(streakIncreased);
    }
}