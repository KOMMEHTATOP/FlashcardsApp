using FlashcardsApp.Models;
using FlashcardsAppContracts.Constants;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;

namespace FlashcardsApp.Data;

public static class DbSeeder
{
    public static async Task SeedAsync(ApplicationDbContext context, UserManager<User> userManager)
    {
        var userId = Guid.Parse("11111111-1111-1111-1111-111111111111");

        // 1. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        var testUser = await userManager.FindByEmailAsync("test@test.com");

        if (testUser == null)
        {
            testUser = new User
            {
                Id = userId, UserName = "test@test.com", Email = "test@test.com", EmailConfirmed = true
            };

            var result = await userManager.CreateAsync(testUser, "Test123!");

            if (!result.Succeeded)
            {
                Console.WriteLine("Failed to create test user:");

                foreach (var error in result.Errors)
                {
                    Console.WriteLine($"  - {error.Description}");
                }

                return; // –í—ã—Ö–æ–¥–∏–º –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è
            }

            Console.WriteLine("Test user created successfully!");

            // –°–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            var statistics = new UserStatistics
            {
                UserId = testUser.Id,
                TotalXP = 650,
                CurrentStreak = 7,
                BestStreak = 10,
                LastStudyDate = DateTime.UtcNow,
                TotalStudyTime = TimeSpan.FromHours(2.5)
            };
            context.UserStatistics.Add(statistics);
            await context.SaveChangesAsync();
            Console.WriteLine("User statistics created!");
        }

        // 2. –°–æ–∑–¥–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        if (!await context.Achievements.AnyAsync())
        {
            var achievements = new List<Achievement>
            {
                new Achievement
                {
                    Id = Guid.NewGuid(), Name = "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏", Description = "–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫", IconUrl = "üî•"
                },
                new Achievement
                {
                    Id = Guid.NewGuid(), Name = "7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥", Description = "–ó–∞–Ω–∏–º–∞–π—Ç–µ—Å—å 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥", IconUrl = "‚≠ê"
                },
                new Achievement
                {
                    Id = Guid.NewGuid(),
                    Name = "–í—ã—Å—à–∏–π –±–∞–ª–ª",
                    Description = "–ü–æ–ª—É—á–∏—Ç–µ 100% –≤—ã–∏–≥—Ä—ã—à–∞ –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ",
                    IconUrl = "üéØ"
                },
                new Achievement
                {
                    Id = Guid.NewGuid(),
                    Name = "–ë—ã—Å—Ç—Ä–æ –æ–±—É—á–∞—é—â–∏–π—Å—è",
                    Description = "–ü—Ä–æ–π–¥–∏—Ç–µ 10 —É—Ä–æ–∫–æ–≤ –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å",
                    IconUrl = "üèÜ"
                },
                new Achievement
                {
                    Id = Guid.NewGuid(), Name = "–ö–æ—Ä–æ–ª—å –∑–Ω–∞–Ω–∏–π", Description = "–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 10-–≥–æ —É—Ä–æ–≤–Ω—è", IconUrl = "üëë"
                },
                new Achievement
                {
                    Id = Guid.NewGuid(),
                    Name = "–í–æ—Å—Ö–æ–¥—è—â–∞—è –∑–≤–µ–∑–¥–∞",
                    Description = "–ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ 1000 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞",
                    IconUrl = "üöÄ"
                }
            };

            context.Achievements.AddRange(achievements);
            await context.SaveChangesAsync();
            Console.WriteLine("Achievements created!");

            // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–µ 3 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            var userAchievements = new List<UserAchievement>
            {
                new UserAchievement
                {
                    UserId = userId, AchievementId = achievements[0].Id, UnlockedAt = DateTime.UtcNow.AddDays(-10)
                },
                new UserAchievement
                {
                    UserId = userId, AchievementId = achievements[1].Id, UnlockedAt = DateTime.UtcNow.AddDays(-3)
                },
                new UserAchievement
                {
                    UserId = userId, AchievementId = achievements[2].Id, UnlockedAt = DateTime.UtcNow.AddDays(-1)
                }
            };

            context.UserAchievements.AddRange(userAchievements);
            await context.SaveChangesAsync();
            Console.WriteLine("User achievements unlocked!");
        }

        // 3. –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—ã
        if (!await context.Groups.AnyAsync())
        {
            var colors = new[]
            {
                GroupColor.Red, GroupColor.Green, GroupColor.Yellow, GroupColor.Orange, GroupColor.Purple
            };
            var groups = new List<Group>();

            for (int i = 1; i <= 5; i++)
            {
                var group = new Group
                {
                    Id = Guid.NewGuid(),
                    UserId = userId,
                    GroupName = $"Group {i}",
                    GroupColor = colors[i - 1],
                    CreatedAt = DateTime.UtcNow.AddDays(-i),
                    Order = i
                };
                groups.Add(group);
            }

            context.Groups.AddRange(groups);
            await context.SaveChangesAsync();
            Console.WriteLine("Groups created!");

            // 4. –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
            foreach (var group in groups)
            {
                var cards = new List<Card>();

                for (int j = 1; j <= 15; j++)
                {
                    var card = new Card
                    {
                        CardId = Guid.NewGuid(),
                        UserId = userId,
                        GroupId = group.Id,
                        Question = $"Question {j} for {group.GroupName}",
                        Answer = $"Answer {j} for {group.GroupName}",
                        CreatedAt = DateTime.UtcNow.AddDays(-j),
                        UpdatedAt = DateTime.UtcNow.AddDays(-j)
                    };
                    cards.Add(card);
                }

                context.Cards.AddRange(cards);
            }

            await context.SaveChangesAsync();
            Console.WriteLine("Cards created!");
        }

        Console.WriteLine("=== SEED COMPLETED SUCCESSFULLY ===");
    }

}
