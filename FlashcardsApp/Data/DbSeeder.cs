using FlashcardsApp.Models;
using FlashcardsAppContracts.Constants;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;

namespace FlashcardsApp.Data;

public static class DbSeeder
{
    public static async Task SeedAsync(ApplicationDbContext context, UserManager<User> userManager)
    {
        var userId = Guid.Parse("11111111-1111-1111-1111-111111111111");

        // 1. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        var testUser = await userManager.FindByEmailAsync("test@test.com");

        if (testUser == null)
        {
            testUser = new User
            {
                Id = userId, 
                Login = "testuser", 
                UserName = "test@test.com", 
                Email = "test@test.com", 
                EmailConfirmed = true
            };

            var result = await userManager.CreateAsync(testUser, "Test123!");

            if (!result.Succeeded)
            {
                Console.WriteLine("Failed to create test user:");
                foreach (var error in result.Errors)
                {
                    Console.WriteLine($"  - {error.Description}");
                }
                return;
            }

            Console.WriteLine("‚úÖ Test user created successfully!");

            // –°–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            var statistics = new UserStatistics
            {
                UserId = testUser.Id,
                TotalXP = 650,
                Level = 5,
                CurrentStreak = 7,
                BestStreak = 10,
                LastStudyDate = DateTime.UtcNow,
                TotalStudyTime = TimeSpan.FromHours(12.5)
            };
            context.UserStatistics.Add(statistics);
            await context.SaveChangesAsync();
            Console.WriteLine("‚úÖ User statistics created!");
        }

        // 2. –°–æ–∑–¥–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å Tailwind –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏
        if (!await context.Achievements.AnyAsync())
        {
            var achievements = new List<Achievement>
            {
                new Achievement
                {
                    Id = Guid.NewGuid(), 
                    Name = "7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥", 
                    Description = "–ó–∞–Ω–∏–º–∞–π—Ç–µ—Å—å 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥", 
                    IconUrl = "üî•",
                    Gradient = "from-orange-400 to-red-500"
                },
                new Achievement
                {
                    Id = Guid.NewGuid(), 
                    Name = "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏", 
                    Description = "–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫", 
                    IconUrl = "‚≠ê",
                    Gradient = "from-yellow-400 to-orange-500"
                },
                new Achievement
                {
                    Id = Guid.NewGuid(),
                    Name = "–í—ã—Å—à–∏–π –±–∞–ª–ª",
                    Description = "–ü–æ–ª—É—á–∏—Ç–µ 100% –≤—ã–∏–≥—Ä—ã—à–∞ –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ",
                    IconUrl = "üéØ",
                    Gradient = "from-green-400 to-emerald-500"
                },
                new Achievement
                {
                    Id = Guid.NewGuid(),
                    Name = "–ë—ã—Å—Ç—Ä–æ –æ–±—É—á–∞—é—â–∏–π—Å—è",
                    Description = "–ü—Ä–æ–π–¥–∏—Ç–µ 10 —É—Ä–æ–∫–æ–≤ –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å",
                    IconUrl = "üèÖ",
                    Gradient = "from-blue-400 to-purple-500"
                },
                new Achievement
                {
                    Id = Guid.NewGuid(), 
                    Name = "–ö–æ—Ä–æ–ª—å –∑–Ω–∞–Ω–∏–π", 
                    Description = "–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 10-–≥–æ —É—Ä–æ–≤–Ω—è", 
                    IconUrl = "üëë",
                    Gradient = "from-purple-400 to-pink-500"
                },
                new Achievement
                {
                    Id = Guid.NewGuid(),
                    Name = "–í–æ—Å—Ö–æ–¥—è—â–∞—è –∑–≤–µ–∑–¥–∞",
                    Description = "–ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ 1000 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞",
                    IconUrl = "üöÄ",
                    Gradient = "from-cyan-400 to-blue-500"
                }
            };

            context.Achievements.AddRange(achievements);
            await context.SaveChangesAsync();
            Console.WriteLine("‚úÖ Achievements created!");

            // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–µ 3 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            var userAchievements = new List<UserAchievement>
            {
                new UserAchievement
                {
                    UserId = userId, 
                    AchievementId = achievements[0].Id, // 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥
                    UnlockedAt = DateTime.UtcNow.AddDays(-10)
                },
                new UserAchievement
                {
                    UserId = userId, 
                    AchievementId = achievements[1].Id, // –ü–µ—Ä–≤—ã–µ —à–∞–≥–∏
                    UnlockedAt = DateTime.UtcNow.AddDays(-3)
                },
                new UserAchievement
                {
                    UserId = userId, 
                    AchievementId = achievements[2].Id, // –í—ã—Å—à–∏–π –±–∞–ª–ª
                    UnlockedAt = DateTime.UtcNow.AddDays(-1)
                }
            };

            context.UserAchievements.AddRange(userAchievements);
            await context.SaveChangesAsync();
            Console.WriteLine("‚úÖ User achievements unlocked!");
        }

        // 3. –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—ã
        if (!await context.Groups.AnyAsync())
        {
            var groupsData = new[]
            {
                new { Name = "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", Color = GroupColor.Red },
                new { Name = "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", Color = GroupColor.Green },
                new { Name = "–ò—Å—Ç–æ—Ä–∏—è", Color = GroupColor.Yellow },
                new { Name = "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", Color = GroupColor.Orange },
                new { Name = "–ë–∏–æ–ª–æ–≥–∏—è", Color = GroupColor.Purple }
            };

            var groups = new List<Group>();

            for (int i = 0; i < groupsData.Length; i++)
            {
                var group = new Group
                {
                    Id = Guid.NewGuid(),
                    UserId = userId,
                    GroupName = groupsData[i].Name,
                    GroupColor = groupsData[i].Color,
                    CreatedAt = DateTime.UtcNow.AddDays(-(i + 1)),
                    Order = i + 1
                };
                groups.Add(group);
            }

            context.Groups.AddRange(groups);
            await context.SaveChangesAsync();
            Console.WriteLine("‚úÖ Groups created!");

            // 4. –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
            var cardsData = new Dictionary<string, List<(string Question, string Answer)>>
            {
                ["–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫"] = new()
                {
                    ("–ö–∞–∫ —Å–∫–∞–∑–∞—Ç—å '–ø—Ä–∏–≤–µ—Ç' –ø–æ-–∞–Ω–≥–ª–∏–π—Å–∫–∏?", "Hello"),
                    ("–ü–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ 'book'", "–ö–Ω–∏–≥–∞"),
                    ("–ö–∞–∫ —Å–∫–∞–∑–∞—Ç—å '—Å–ø–∞—Å–∏–±–æ'?", "Thank you"),
                    ("–ü–µ—Ä–µ–≤–æ–¥ 'water'", "–í–æ–¥–∞"),
                    ("–ö–∞–∫ —Å–ø—Ä–æ—Å–∏—Ç—å '–ö–∞–∫ –¥–µ–ª–∞?'", "How are you?")
                },
                ["–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"] = new()
                {
                    ("–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è?", "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"),
                    ("–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –û–û–ü?", "–û–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"),
                    ("–ß—Ç–æ —Ç–∞–∫–æ–µ —Ñ—É–Ω–∫—Ü–∏—è?", "–ë–ª–æ–∫ –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"),
                    ("–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—Å—Å–∏–≤?", "–£–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤"),
                    ("–ß—Ç–æ —Ç–∞–∫–æ–µ —Ü–∏–∫–ª?", "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∫–æ–¥–∞")
                },
                ["–ò—Å—Ç–æ—Ä–∏—è"] = new()
                {
                    ("–í –∫–∞–∫–æ–º –≥–æ–¥—É –æ—Ç–∫—Ä—ã–ª–∏ –ê–º–µ—Ä–∏–∫—É?", "1492"),
                    ("–ö—Ç–æ –±—ã–ª –ø–µ—Ä–≤—ã–º –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º –°–®–ê?", "–î–∂–æ—Ä–¥–∂ –í–∞—à–∏–Ω–≥—Ç–æ–Ω"),
                    ("–ö–æ–≥–¥–∞ –Ω–∞—á–∞–ª–∞—Å—å –í—Ç–æ—Ä–∞—è –º–∏—Ä–æ–≤–∞—è –≤–æ–π–Ω–∞?", "1 —Å–µ–Ω—Ç—è–±—Ä—è 1939"),
                    ("–°—Ç–æ–ª–∏—Ü–∞ –î—Ä–µ–≤–Ω–µ–≥–æ –†–∏–º–∞?", "–†–∏–º"),
                    ("–ö–æ–≥–¥–∞ –ø–∞–ª–∞ –†–∏–º—Å–∫–∞—è –∏–º–ø–µ—Ä–∏—è?", "476 –≥–æ–¥ –Ω.—ç.")
                },
                ["–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"] = new()
                {
                    ("–ß–µ–º—É —Ä–∞–≤–Ω–æ œÄ?", "‚âà3.14159"),
                    ("–ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è?", "–°–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏"),
                    ("–¢–µ–æ—Ä–µ–º–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞?", "a¬≤ + b¬≤ = c¬≤"),
                    ("–ß—Ç–æ —Ç–∞–∫–æ–µ –∏–Ω—Ç–µ–≥—Ä–∞–ª?", "–ü–ª–æ—â–∞–¥—å –ø–æ–¥ –∫—Ä–∏–≤–æ–π"),
                    ("–ß–µ–º—É —Ä–∞–≤–µ–Ω sin(90¬∞)?", "1")
                },
                ["–ë–∏–æ–ª–æ–≥–∏—è"] = new()
                {
                    ("–ß—Ç–æ —Ç–∞–∫–æ–µ –î–ù–ö?", "–î–µ–∑–æ–∫—Å–∏—Ä–∏–±–æ–Ω—É–∫–ª–µ–∏–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞"),
                    ("–°–∫–æ–ª—å–∫–æ —Ö—Ä–æ–º–æ—Å–æ–º —É —á–µ–ª–æ–≤–µ–∫–∞?", "46 (23 –ø–∞—Ä—ã)"),
                    ("–ß—Ç–æ —Ç–∞–∫–æ–µ —Ñ–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑?", "–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–≤–µ—Ç–∞ –≤ —ç–Ω–µ—Ä–≥–∏—é"),
                    ("–û—Å–Ω–æ–≤–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –∂–∏–∑–Ω–∏?", "–ö–ª–µ—Ç–∫–∞"),
                    ("–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∏—Ç–æ–∑?", "–î–µ–ª–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏")
                }
            };

            foreach (var group in groups)
            {
                if (cardsData.TryGetValue(group.GroupName, out var cards))
                {
                    var cardEntities = cards.Select((card, index) => new Card
                    {
                        CardId = Guid.NewGuid(),
                        UserId = userId,
                        GroupId = group.Id,
                        Question = card.Question,
                        Answer = card.Answer,
                        CreatedAt = DateTime.UtcNow.AddDays(-(index + 1)),
                        UpdatedAt = DateTime.UtcNow.AddDays(-(index + 1))
                    }).ToList();

                    context.Cards.AddRange(cardEntities);
                }
            }

            await context.SaveChangesAsync();
            Console.WriteLine("‚úÖ Cards created!");
        }

        Console.WriteLine("=== SEED COMPLETED SUCCESSFULLY ===");
    }
}